#+TITLE: smatheusblu's Emacs Config
#+AUTHOR: Matheus Nogueira Silveira (smatheusblu)
#+DESCRIPTION: smatheusblu's personal Emacs config.
#+STARTUP: overview
#+OPTIONS: toc:2

#+begin_export ascii
███████╗███╗   ███╗ █████╗ ████████╗██╗  ██╗███████╗██╗   ██╗███████╗██████╗ ██╗     ██╗   ██╗███████╗
██╔════╝████╗ ████║██╔══██╗╚══██╔══╝██║  ██║██╔════╝██║   ██║██╔════╝██╔══██╗██║     ██║   ██║██╔════╝
███████╗██╔████╔██║███████║   ██║   ███████║█████╗  ██║   ██║███████╗██████╔╝██║     ██║   ██║███████╗
╚════██║██║╚██╔╝██║██╔══██║   ██║   ██╔══██║██╔══╝  ██║   ██║╚════██║██╔══██╗██║     ██║   ██║╚════██║
███████║██║ ╚═╝ ██║██║  ██║   ██║   ██║  ██║███████╗╚██████╔╝███████║██████╔╝███████╗╚██████╔╝███████║
╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚══════╝╚═════╝ ╚══════╝ ╚═════╝ ╚══════╝
                                                                                                      
                            ███████╗███╗   ███╗ █████╗  ██████╗███████╗                               
                            ██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝                               
                            █████╗  ██╔████╔██║███████║██║     ███████╗                               
                            ██╔══╝  ██║╚██╔╝██║██╔══██║██║     ╚════██║                               
                            ███████╗██║ ╚═╝ ██║██║  ██║╚██████╗███████║                               
                            ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝                               
                                                                                                      
#+end_export

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#adding-the-scripts-directory-to-path][Adding the scripts directory to path]]
  - [[#exec-path-from-shell][exec-path-from-shell]]
  - [[#transient][Transient]]
  - [[#magit][Magit]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#avy][AVY]]
- [[#ai][AI]]
  - [[#github-copilot-chat][Github Copilot Chat]]
- [[#backup][BACKUP]]
- [[#beacon][BEACON]]
- [[#breadcrumb][BREADCRUMB]]
- [[#buffer-terminator][BUFFER TERMINATOR]]
- [[#clipboard][CLIPBOARD]]
- [[#completion-and-snippets][COMPLETION AND SNIPPETS]]
  - [[#orderless][Orderless]]
  - [[#prescient][Prescient]]
  - [[#corfu][Corfu]]
  - [[#cape][Cape]]
  - [[#yasnippet][Yasnippet]]
  - [[#embark][Embark]]
  - [[#consult][Consult]]
  - [[#marginalia][Marginalia]]
  - [[#vertico][Vertico]]
  - [[#github-copilot][Github Copilot]]
- [[#csv-mode][CSV MODE]]
- [[#dashboard][DASHBOARD]]
- [[#diminish][DIMINISH]]
- [[#dired][DIRED]]
- [[#drag-stuff][DRAG-STUFF]]
- [[#ediff][EDIFF]]
- [[#evil-mode][EVIL MODE]]
  - [[#evil-escape-with-jk][Evil Escape with jk]]
  - [[#smart-text-objects][Smart Text Objects]]
- [[#flycheck][FLYCHECK]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#general-keybindings][GENERAL KEYBINDINGS]]
- [[#golden-ratio][GOLDEN RATIO]]
- [[#highlight-todo][HIGHLIGHT TODO]]
- [[#indentation][INDENTATION]]
  - [[#dtrt-indent][dtrt-indent]]
  - [[#indent-bars][Indent Bars]]
- [[#language-support][LANGUAGE SUPPORT]]
  - [[#apheleia-formatting][Apheleia formatting]]
  - [[#general][General]]
  - [[#lua][Lua]]
  - [[#tree-sitter][Tree-sitter]]
  - [[#lsp][LSP]]
  - [[#python][Python]]
- [[#line-numbers][LINE NUMBERS]]
- [[#markdown-mode][MARKDOWN MODE]]
- [[#minibuffer-escape][MINIBUFFER ESCAPE]]
- [[#modeline][MODELINE]]
- [[#neotree][NEOTREE]]
- [[#org-mode][ORG MODE]]
  - [[#agenda][Agenda]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#diminish-org-indent-mode][Diminish Org Indent Mode]]
  - [[#download-and-screenshot][Download and Screenshot]]
  - [[#inline-images][Inline Images]]
  - [[#nov-mode][Nov Mode]]
  - [[#org-modern-mode][Org Modern Mode]]
  - [[#org-level-headers][Org Level Headers]]
  - [[#org-roam][Org Roam]]
  - [[#org-sql][Org SQL]]
  - [[#olivetti-mode][Olivetti Mode]]
  - [[#org-babel-do-load-languages][org-babel-do-load-languages]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#visual-fill-column][visual-fill-column]]
- [[#pdfs][PDFs]]
- [[#perspective][PERSPECTIVE]]
- [[#projectile][PROJECTILE]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#sane-defaults][SANE DEFAULTS]]
- [[#session-management][SESSION MANAGEMENT]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#sudo-edit][SUDO EDIT]]
- [[#theme][THEME]]
  - [[#themes][Themes]]
  - [[#doom-themes][doom-themes]]
  - [[#ef-themes][ef-themes]]
  - [[#remove-background-on-line-numbers][Remove Background on line numbers]]
- [[#tldr][TLDR]]
- [[#transparency][TRANSPARENCY]]
- [[#which-key][WHICH-KEY]]
- [[#zoxide][ZOXIDE]]

* IMPORTANT PROGRAMS TO LOAD FIRST

** Adding the scripts directory to path
This configures some .el custom scripts to initialize with emacs.
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/scripts/")
#+end_src

*** Sourcing the scripts
Each scripts must be sourced here
#+begin_src emacs-lisp
  (require 'elpaca-setup)
  (require 'buffer-move)
  (require 'app-launchers)
  (require 'notes-launcher)
#+end_src

** exec-path-from-shell
This is to have the PATH avaiable.
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  ;; Always initialize PATH from shell (including Linux/fish)
  (exec-path-from-shell-initialize)
  ;; Specifically copy these variables from fish
  (exec-path-from-shell-copy-envs '("PATH" "PYTHONPATH" "VIRTUAL_ENV" "OLLAMA_API_BASE")))
#+end_src

** Transient
This gives better command menus.
#+begin_src emacs-lisp
(use-package transient
  :ensure t)
#+end_src

** Magit
Git client for Emacs.
#+begin_src emacs-lisp
(use-package magit
  :defer t
  :hook
  (magit-mode . visual-line-mode)
  :custom
  (magit-blame-echo-style 'headings)
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  (magit-diff-refine-hunk t))
#+end_src

* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))
(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

(use-package nerd-icons
  :ensure t)
#+end_src

* AVY
This for moving inside a buffer using characters close to the homerow to identify where the user wants to go on the screen.

#+begin_src emacs-lisp
;; 1. Make C-s use Avy
(use-package avy
  :ensure (:host github :repo "abo-abo/avy")
  :config
  (setq avy-timeout-seconds 0.5)
  (setq avy-all-windows t))
#+end_src

* AI
This is where all AI capabilities are getting configured.

** Github Copilot Chat 
#+begin_src emacs-lisp
;; Copilot Chat for interactive AI assistance
(use-package copilot-chat
  :ensure (copilot-chat :host github :repo "chep/copilot-chat.el"
                         :files ("*.el"))
  :after (copilot request markdown-mode)
  :custom
  ;; Backend: 'curl (default, streaming) or 'request (waits for full response)
  (copilot-chat-backend 'curl)
  ;; Frontend: 'org (default), 'markdown, or 'shell-maker
  (copilot-chat-frontend 'org)
  ;; Auto-scroll chat buffer as responses arrive
  (copilot-chat-follow t)
  ;; Use custom instructions from .github/copilot-instructions.md
  (copilot-chat-use-copilot-instruction-files t)
  ;; Use git commit instructions from .github/git-commit-instructions.md
  (copilot-chat-use-git-commit-instruction-files t)
  ;; Set default model to GPT-5 mini (fast, efficient, available on all plans)
  (copilot-chat-default-model "gpt-5-mini")
  :bind
  ;; Handy keybindings for org frontend code block yanking
  (:map global-map
   ("C-c C-y" . copilot-chat-yank)
   ("C-c M-y" . copilot-chat-yank-pop))
  :config
  ;; Bind 'i' to jump to input area (like Vim insert mode) after mode loads
  (add-hook 'copilot-chat-mode-hook
            (lambda ()
              (local-set-key (kbd "i") 'copilot-chat-goto-input)))
  ;; Optional: Auto-generate commit messages when writing commits
  ;; (add-hook 'git-commit-setup-hook 'copilot-chat-insert-commit-message)
  )
#+end_src
* BACKUP 
By default, Emacs creates automatic backups of files in their original directories, such "file.el" and the backup "file.el~".  This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.

#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

* BEACON
This configures a flashy highlight to show where the cursor is when moving a lot on the screen.

#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1))
#+end_src

* BREADCRUMB
Breadcrumbs are sequences of short strings indicating where you are in some big tree-like maze that is probably your code.
#+begin_src emacs-lisp
(use-package breadcrumb
  :hook ((emacs-lisp-mode . breadcrumb-local-mode)
         (org-mode . breadcrumb-local-mode))
  :config
  (setq breadcrumb-imenu-crumb-separator " > "))
#+end_src

* BUFFER TERMINATOR
This automatically closes buffers that are not in use.
#+begin_src emacs-lisp
(use-package buffer-terminator
  :ensure t
  :custom
  (buffer-terminator-verbose nil)

  ;; Set the inactivity timeout (in seconds) after which buffers are considered
  ;; inactive (default is 30 minutes):
  (buffer-terminator-inactivity-timeout (* 30 60)) ; 30 minutes

  ;; Define how frequently the cleanup process should run (default is every 10
  ;; minutes):
  (buffer-terminator-interval (* 10 60)) ; 10 minutes

  :config
  (buffer-terminator-mode 1))
#+end_src

* CLIPBOARD
This is to fix the clipboard not working properly with wayland

#+begin_src emacs-lisp
(when (executable-find "wl-copy")
  (defun wl-copy (text)
    (let ((p (make-process :name "wl-copy" 
                          :command '("wl-copy") 
                          :connection-type 'pipe)))
      (process-send-string p text)
      (process-send-eof p)))
  (setq interprogram-cut-function 'wl-copy))

(when (executable-find "wl-paste")
  (defun wl-paste ()
    (let ((output (shell-command-to-string "wl-paste -n 2>/dev/null")))
      ;; Remove carriage returns and trailing whitespace
      (string-trim-right (replace-regexp-in-string "\r" "" output))))
  (setq interprogram-paste-function 'wl-paste))

;; Better Evil paste behavior with system clipboard
(with-eval-after-load 'evil
  ;; Make sure Evil uses the system clipboard properly
  (setq evil-kill-on-visual-paste nil)  ; Don't pollute kill ring when pasting in visual mode
  
  ;; Fix paste in insert mode
  (defun my/evil-paste-from-clipboard ()
    "Paste from system clipboard in insert mode."
    (interactive)
    (insert (wl-paste)))
  
  ;; Bind Ctrl+V in insert mode to paste properly
  (define-key evil-insert-state-map (kbd "C-v") #'my/evil-paste-from-clipboard)
  
  ;; Also ensure normal mode paste works correctly
  (define-key evil-normal-state-map (kbd "C-v") #'evil-paste-after))
#+end_src

* COMPLETION AND SNIPPETS
This is for configuring all types of completion, including in buffer and popup.

** Orderless
This package provides an orderless completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order. Each component can match in any one of several ways: literally, as a regexp, as an initialism, in the flex style, or as multiple word prefixes. By default, regexp and literal matches are enabled.
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Prescient
Improves predictability in all completion modes.
#+begin_src emacs-lisp
(use-package prescient
  :ensure t
  :config
  (prescient-persist-mode 1))

(use-package corfu-prescient
  :ensure t
  :after (corfu prescient)
  :config
  (corfu-prescient-mode 1))
#+end_src

** Corfu
Corfu enhances in-buffer completion with a small completion popup. The current candidates are shown in a popup below or above the point, and can be selected by moving up and down. 
#+begin_src emacs-lisp
;; Modern completion with Corfu
(use-package corfu
  :custom
  (corfu-auto t)
  (corfu-popupinfo-delay '(0.1 . 0.1))  ; Faster documentation popup
  (corfu-popupinfo-hide nil)
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-auto-delay 0.1)         ;; Faster auto-completion trigger
  (corfu-auto-prefix 1)          ;; Start completion after 1 character
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-quit-at-boundary t)     ;; Quit at word boundaries
  (corfu-quit-no-match t)        ;; Quit when there's no match
  (corfu-preview-current nil)    ;; Disable current candidate preview
  (corfu-preselect 'prompt)      ;; Preselect the prompt
  (corfu-on-exact-match nil)     ;; Don't auto-insert, let user decide
  (corfu-scroll-margin 5)        ;; Use scroll margin
  (corfu-count 10)               ;; Maximum number of candidates shown
  (corfu-max-width 100)          ;; Maximum popup width
  (corfu-min-width 15)           ;; Minimum popup width
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous)
        ("RET" . corfu-insert)
        ([return] . corfu-insert))
  :init
  (global-corfu-mode)
  (corfu-history-mode)
  :config
  (corfu-popupinfo-mode)
  ;; Ensure Corfu popup is preferred over minibuffer completion
  (setq completion-in-region-function #'corfu--in-region)
  
  ;; Force Corfu to always use popup display
  (setq corfu-echo-delay 0.25)
  
  ;; Simplified minibuffer setup
  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input))
      (setq-local corfu-auto nil)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1))

;; Add visual enhancements
(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default)
  (kind-icon-blend-background t)
  (kind-icon-blend-frac 0.08)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

;; Terminal support with enhanced display
(unless (display-graphic-p)
  (use-package corfu-terminal
    :ensure t
    :config
    (corfu-terminal-mode +1)))

;; Disable company-mode if it exists to prevent conflicts
(when (featurep 'company)
  (global-company-mode -1))

;; Configure TAB behavior and ensure completion UI consistency
(setq tab-always-indent 'complete)
(setq completion-cycle-threshold 3)
(setq completions-detailed t)
(setq completion-show-help nil)
#+end_src

** Cape
Cape provides Completion At Point Extensions which can be used in combination with Corfu or the default completion UI. The completion backends used by completion-at-point are so called completion-at-point-functions (Capfs).
#+begin_src emacs-lisp
(use-package cape
  :ensure t
  :init
  ;; Add basic completion functions in order of preference
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  :config
  ;; Simple function to add elisp completion in elisp modes
  (defun my/cape-elisp-setup ()
    (add-to-list 'completion-at-point-functions #'cape-elisp-symbol t))
  ;; Python-specific completion setup
  (defun my/python-mode-setup ()
    "Setup completion for Python mode with LSP and Cape integration."
    ;; Ensure LSP completion is first in the list
    (setq-local completion-at-point-functions 
                (list #'lsp-completion-at-point
                      #'cape-file
                      #'cape-keyword
                      #'cape-dabbrev))
    ;; Force Corfu auto-completion to be more aggressive in Python
    (setq-local corfu-auto t)
    (setq-local corfu-auto-delay 0.0)  ; Immediate trigger
    (setq-local corfu-auto-prefix 1)   ; After 1 character
    ;; Don't activate signature help - basedpyright doesn't support it
    (message "Python completion setup completed"))
  
  :hook
  (emacs-lisp-mode . my/cape-elisp-setup)
  (lisp-interaction-mode . my/cape-elisp-setup)
  (python-mode . my/python-mode-setup)
  (python-ts-mode . my/python-mode-setup))
#+end_src


** Yasnippet
YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is inspired from TextMate's syntax, you can even import most TextMate templates to YASnippet.
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode)
  (setq yas-trigger-key "TAB")  ; Explicit expansion
  :hook
  (prog-mode . (lambda ()
                 (add-to-list 'completion-at-point-functions #'yas-expand-from-trigger-key t))))

(use-package yasnippet-snippets
  :after yasnippet)
#+end_src

** Embark
Embark makes it easy to choose a command to run based on what is near point, both during a minibuffer completion session and in normal buffers.  With point on an URL in a buffer you can open the URL in a browser or eww or download the file it points to. If while switching buffers you spot an old one, you can kill it right there and continue to select another. Embark comes preconfigured with over a hundred actions for common types of targets such as files, buffers, identifiers, s-expressions, sentences; and it is easy to add more actions and more target types. Embark can also collect all the candidates in a minibuffer to an occur-like buffer or export them to a buffer in a major-mode specific to the type of candidates, such as dired for a set of files, ibuffer for a set of buffers, or customize for a set of variables.
#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

;; Embark keybindings with general
(with-eval-after-load 'general
  (general-define-key
   :states '(normal visual insert emacs)
   "C-." 'embark-act
   "C-;" 'embark-dwim))
#+end_src

** Consult
Consult provides search and navigation commands based on the Emacs completion function completing-read. Completion allows you to quickly select an item from a list of candidates. Consult offers asynchronous and interactive consult-grep and consult-ripgrep commands, and the line-based search command consult-line. Furthermore Consult provides an advanced buffer switching command consult-buffer to switch between buffers, recently opened files, bookmarks and buffer-like candidates from other sources.
#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key '(:debounce 0.4 any))
  (setq consult-narrow-key "<"))

;; Consult keybindings with general - you can add these to your dt/leader-keys
;; Example of how to integrate into your existing structure:
(with-eval-after-load 'general
  ;; Global consult bindings (non-leader)
  (general-define-key
   :states '(normal visual insert emacs)
   "M-y" 'consult-yank-pop
   "M-g g" 'consult-goto-line
   "M-g M-g" 'consult-goto-line
   "M-g i" 'consult-imenu
   "M-g o" 'consult-outline
   "M-s l" 'consult-line
   "M-s r" 'consult-ripgrep)
  
  ;; Isearch integration
  (general-define-key
   :keymaps 'isearch-mode-map
   "M-e" 'consult-isearch-history
   "M-s l" 'consult-line)
  
  ;; Minibuffer integration
  (general-define-key
   :keymaps 'minibuffer-local-map
   "M-s" 'consult-history
   "M-r" 'consult-history))
#+end_src

** Marginalia
This package provides marginalia-mode which adds marginalia to the minibuffer completions. Marginalia are marks or annotations placed at the margin of the page of a book or in this case helpful colorful annotations placed at the margin of the minibuffer for your completion candidates. Marginalia can only add annotations to the completion candidates. It cannot modify the appearance of the candidates themselves, which are shown unaltered as supplied by the original command.
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :init
  (marginalia-mode))

;; Marginalia keybinding with general
(with-eval-after-load 'general
  (general-define-key
   :keymaps 'minibuffer-local-map
   "M-A" 'marginalia-cycle))
#+end_src

** Vertico
Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. The focus of Vertico is to provide a UI which behaves correctly under all circumstances. 
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode)
  :custom
  (vertico-cycle t)
  (vertico-resize t)
  :config
  ;; Different scroll margin
  (setq vertico-scroll-margin 0)
  ;; Show more candidates
  (setq vertico-count 20))

;; Enable prescient for vertico too
(use-package vertico-prescient
  :ensure t
  :after (vertico prescient)
  :config
  (vertico-prescient-mode 1))
#+end_src

** Github Copilot
#+begin_src emacs-lisp
;; Install copilot.el
(use-package copilot
  :ensure (copilot :host github :repo "copilot-emacs/copilot.el"
                    :files ("*.el"))
  :hook (prog-mode . copilot-mode)
  :custom
  (copilot-idle-delay 0.1)
  (copilot-max-char 100000)
  :bind (:map copilot-completion-map
              ;; Use C-TAB for Copilot since TAB is used by Corfu
              ("C-<tab>" . copilot-accept-completion)
              ("C-TAB" . copilot-accept-completion)
              ("M-<tab>" . copilot-accept-completion-by-word)
              ("M-TAB" . copilot-accept-completion-by-word)
              ("M-]" . copilot-next-completion)
              ("M-[" . copilot-previous-completion)
              ("C-g" . copilot-clear-overlay))
  :config
  ;; Disable copilot in certain modes
  (add-to-list 'copilot-disable-predicates 'copilot--buffer-too-small)
  
  ;; Customize the appearance to work well with Corfu
  (defface copilot-suggestion-face
    '((t :inherit shadow :slant italic))
    "Face for Copilot suggestions.")
  
  ;; Make Copilot work nicely with Corfu
  ;; Copilot shows inline ghost text, Corfu shows popup completions
  ;; They complement each other rather than conflict
  (defun my/copilot-setup ()
    "Setup Copilot to work alongside Corfu."
    ;; Ensure Copilot doesn't interfere with Corfu's TAB behavior
    (setq-local copilot-indent-offset-warning-disable t))
  
  (add-hook 'copilot-mode-hook #'my/copilot-setup))

;; Helper function to toggle Copilot
(defun my/toggle-copilot ()
  "Toggle Copilot mode on/off."
  (interactive)
  (if copilot-mode
      (progn
        (copilot-mode -1)
        (message "Copilot disabled"))
    (progn
      (copilot-mode 1)
      (message "Copilot enabled"))))

;; Add keybinding with general (integrate with your existing setup)
(with-eval-after-load 'general
  (general-define-key
   :states '(normal visual insert emacs)
   "C-c a" 'my/toggle-copilot
   "C-c A" 'copilot-diagnose))

;; Optional: Install editorconfig for better Copilot context
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+end_src
* CSV MODE
This is to view and edit csv files in a table like structure.
#+begin_src emacs-lisp
(use-package csv-mode
  :ensure t
  :mode "\\.[Cc][Ss][Vv]\\'"
  :config
  ;; Separator options
  (setq csv-separators '("," ";" "|" "\t"))
  (setq csv-align-padding 1)
  (setq csv-header-lines 1)
  (setq csv-truncate-lines t)
  
  :hook ((csv-mode . my-csv-auto-setup))
  
  :bind (:map csv-mode-map
         ("C-c C-a" . csv-align-fields)
         ("C-c C-u" . csv-unalign-fields)
         ("C-c C-s" . csv-sort-fields)
         ("C-c C-k" . csv-kill-fields)
         ("C-c C-y" . csv-yank-fields)
         ("TAB" . csv-forward-field)
         ("S-TAB" . csv-backward-field)))

;; Auto-setup function
(defun my-csv-auto-setup ()
  "Automatically setup CSV: guess separator, align, and show header."
  ;; Step 1: Guess separator
  (csv-guess-set-separator)
  
  ;; Step 2: Enable header line
  (csv-header-line)
  
  ;; Step 3: Highlight current row
  (hl-line-mode 1)
  
  ;; Step 4: Align fields - call it interactively with proper region
  (save-excursion
    (goto-char (point-min))
    (csv-align-fields nil (point-min) (point-max)))
  
  ;; Confirmation message
  (message "CSV ready: separator=%s, aligned=✓, header=✓" csv-separator-chars))

;; Convert CSV to Org table - FIXED VERSION
(defun csv-to-org-table ()
  "Convert CSV buffer to org-mode table by adding org table markup."
  (interactive)
  ;; Get separator - handle both character code and string
  (let ((sep (cond
              ;; If it's a list like (59), get the character
              ((and (boundp 'csv-separator-chars)
                    (listp csv-separator-chars))
               (char-to-string (car csv-separator-chars)))
              ;; If it's already a string
              ((and (boundp 'csv-separator-chars)
                    (stringp csv-separator-chars))
               csv-separator-chars)
              ;; Default fallback
              (t ";"))))
    
    ;; Make buffer writable
    (let ((inhibit-read-only t))
      (save-excursion
        ;; Replace separators with |
        (goto-char (point-min))
        (while (search-forward sep nil t)
          (replace-match " | "))
        
        ;; Add | at start and end of lines
        (goto-char (point-min))
        (while (not (eobp))
          (beginning-of-line)
          (insert "| ")
          (end-of-line)
          (insert " |")
          (forward-line 1))
        
        ;; Add header separator after first line
        (goto-char (point-min))
        (forward-line 1)
        (beginning-of-line)
        (insert "|-\n"))
      
      ;; Switch to org-mode and align
      (org-mode)
      (goto-char (point-min))
      (org-table-align)
      (org-table-header-line-mode 1)
      (message "Converted to org-table with separator: %s" sep))))
#+end_src

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;; (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/Documentos/ASCII/TXT/ascii-text-art.txt")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          ;; (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 5)))
  ;; Force dashboard to use projectile for projects
  (setq dashboard-projects-backend 'projectile)
  ;; Show path in project list
  (setq dashboard-projects-show-base nil)
  :custom 
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (agenda . "calendar")
				    (bookmarks . "book")
				    (projects . "folder")))
  :config
  (dashboard-setup-startup-hook)
  (setq projectile-after-switch-project-hook 
      '(lambda () 
         (let ((current-buffer (current-buffer)))
           (dashboard-refresh-buffer)
           (switch-to-buffer current-buffer))))
  (add-hook 'dashboard-mode-hook #'olivetti-mode))
#+end_src

* DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
(use-package diminish)
#+end_src

* DIRED
Dired makes an Emacs buffer containing a listing of a directory, and optionally some of its subdirectories as well. You can use the normal Emacs commands to move around in this buffer, and special Dired commands to operate on the listed files. Dired works with both local and remote directories.
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)
#+end_src

* DRAG-STUFF
[[https://github.com/rejeep/drag-stuff.el][Drag Stuff]] is a minor mode for Emacs that makes it possible to drag stuff (words, region, lines) around in Emacs.  When 'drag-stuff-define-keys' is enabled, then the following keybindings are set: M-up, M-down, M-left, and M-right.

#+begin_src emacs-lisp
(use-package drag-stuff
  :init
  (drag-stuff-global-mode 1)
  (drag-stuff-define-keys))
#+end_src

* EDIFF
'ediff' is a diff program that is built into Emacs.  By default, 'ediff' splits files vertically and places the 'help' frame in its own window.  I have changed this so the two files are split horizontally and the 'help' frame appears as a lower split within the existing window.  Also, I create my own 'dt-ediff-hook' where I add 'j/k' for moving to next/prev diffs.  By default, this is set to 'n/p'.

#+begin_src emacs-lisp
(setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)

(defun dt-ediff-hook ()
  (ediff-setup-keymap)
  (define-key ediff-mode-map "j" 'ediff-next-difference)
  (define-key ediff-mode-map "k" 'ediff-previous-difference))

(add-hook 'ediff-mode-hook 'dt-ediff-hook)
#+end_src 

* EVIL MODE
Evil is an extensible vi layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.

#+begin_src emacs-lisp
(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
    (evil-mode)
      :config
  ;; Custom treesit text objects
  (defun my/treesit-get-node-at-point (node-type)
    "Get the treesit node of NODE-TYPE at point."
    (when (treesit-available-p)
      (let ((node (treesit-node-at (point))))
        (while (and node (not (string-equal (treesit-node-type node) node-type)))
          (setq node (treesit-node-parent node)))
        node)))

  (defun my/evil-inner-function ()
    "Select inner function body."
    (let ((node (my/treesit-get-node-at-point "function_definition")))
      (when node
        (let ((body (treesit-node-child-by-field-name node "body")))
          (when body
            (list (treesit-node-start body)
                  (treesit-node-end body)))))))

  (defun my/evil-outer-function ()
    "Select entire function including def line."
    (let ((node (my/treesit-get-node-at-point "function_definition")))
      (when node
        (list (treesit-node-start node)
              (treesit-node-end node)))))

  (defun my/evil-inner-class ()
    "Select inner class body."
    (let ((node (my/treesit-get-node-at-point "class_definition")))
      (when node
        (let ((body (treesit-node-child-by-field-name node "body")))
          (when body
            (list (treesit-node-start body)
                  (treesit-node-end body)))))))

  (defun my/evil-outer-class ()
    "Select entire class including class line."
    (let ((node (my/treesit-get-node-at-point "class_definition")))
      (when node
        (list (treesit-node-start node)
              (treesit-node-end node)))))

  ;; Define Evil text objects
  (evil-define-text-object evil-inner-function (count &optional beg end type)
    "Inner function text object."
    (my/evil-inner-function))

  (evil-define-text-object evil-outer-function (count &optional beg end type)
    "Outer function text object."
    (my/evil-outer-function))

  (evil-define-text-object evil-inner-class (count &optional beg end type)
    "Inner class text object."
    (my/evil-inner-class))

  (evil-define-text-object evil-outer-class (count &optional beg end type)
    "Outer class text object."
    (my/evil-outer-class))

  ;; Bind to keys
  (define-key evil-inner-text-objects-map "f" 'evil-inner-function)
  (define-key evil-outer-text-objects-map "f" 'evil-outer-function)
  (define-key evil-inner-text-objects-map "c" 'evil-inner-class)
  (define-key evil-outer-text-objects-map "c" 'evil-outer-class))

;; Evil-org: Provides vim keybindings specifically for org-mode
(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  ;; Enable evil-org for org-agenda
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  ;; Set key themes - these control which evil-org features are enabled
  (evil-org-set-key-theme '(navigation insert textobjects additional shift todo heading))
  
  ;; Ensure org-agenda starts in motion state (modern approach)
  (with-eval-after-load 'evil
    (evil-set-initial-state 'org-agenda-mode 'motion)))

;; Evil-collection: Provides evil keybindings for many modes
(use-package evil-collection
  :after evil
  :ensure t
  :config
  ;; Add modes you want evil-collection to handle
  (add-to-list 'evil-collection-mode-list 'help) ;; Evilify help mode
  ;; Remove org-agenda to avoid conflicts with evil-org
  (setq evil-collection-mode-list 
        (delete 'org-agenda evil-collection-mode-list))
  (evil-collection-init))

;; Evil-tutor: Tutorial for learning evil-mode
(use-package evil-tutor
  :ensure t)

;; Fix key conflicts between evil and org-mode
;; This ensures SPC works as leader key and RET/TAB work properly in org-mode
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)  ; Free SPC for leader key
  (define-key evil-motion-state-map (kbd "RET") nil)  ; Free RET for org links
  (define-key evil-motion-state-map (kbd "TAB") nil)) ; Free TAB for org cycling

;; Make RETURN follow links in org-mode
(setq org-return-follows-link t)

(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))

(with-eval-after-load 'evil
  ;; Normal mode bindings for quick image operations
  (evil-define-key 'normal org-mode-map
    (kbd "zi") 'my/org-toggle-inline-images  ; Quick toggle with zi
    (kbd "zI") 'my/org-refresh-inline-images)) ; Refresh with zI
#+end_src

** Evil Escape with jk
Binds the sequence of characters "jk" to exit insert mode and enter normal mode. 
#+begin_src emacs-lisp
(use-package evil-escape
  :after evil
  :diminish
  :config
  (setq evil-escape-key-sequence "jk")
  (evil-escape-mode 1))
#+end_src

** Smart Text Objects
Custom region selection.
#+begin_src emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region)
  :config
  (when (featurep 'evil)
    (define-key evil-visual-state-map "v" 'er/expand-region)
    (define-key evil-visual-state-map "V" 'er/contract-region)))
#+end_src

* FLYCHECK
Install =luacheck= from your Linux distro's repositories for flycheck to work correctly with lua files.  Install =python-pylint= for flycheck to work with python files.  Haskell works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc= is installed.  For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].

#+begin_src emacs-lisp
(use-package flycheck
  :ensure (:host github :repo "flycheck/flycheck")
  :init (global-flycheck-mode)
  :config
  ;; Disable default python checkers to avoid conflicts with LSP
  (setq-default flycheck-disabled-checkers '(python-ruff python-flake8 python-pylint python-mypy)))
#+end_src

* FONTS
Defining the various fonts that Emacs will use.

** Setting the Font Face
This configures the different types of fonts used in emacs.
#+begin_src emacs-lisp
(set-face-attribute 'default nil
:font "CaskaydiaMono Nerd Font"
:height 120
:weight 'medium)
(set-face-attribute 'variable-pitch nil
:font "Ubuntu"
:height 130
:weight 'medium)
(set-face-attribute 'fixed-pitch nil
:font "CaskaydiaMono Nerd Font"
:height 120
:weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
:slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
:slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "CaskaydiaMono Nerd Font-12"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
(set-face-background 'mouse "#ffffff")
#+end_src

** Zooming In/Out
You can use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C-_") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* GENERAL KEYBINDINGS
This is where i define all my keybindings, using general and which-key.

#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-evil-setup)
  (general-auto-unbind-keys)

  ;; Set up 'SPC' as the global leader key
  (general-create-definer dt/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC")

  ;; CORE SYSTEM BINDINGS
  (dt/leader-keys
    "SPC" '(execute-extended-command :wk "M-x ⚡")
    "." '(find-file :wk "Find file 📁")
    "," '(embark-dwim :wk "Embark dwim 🎯")
    ";" '(embark-act :wk "Embark act ⚙️")
    "/" '(perspective-map :wk "Perspective 👁️")
    "TAB TAB" '(comment-line :wk "Comment lines 💬")
    "u" '(universal-argument :wk "Universal argument 🔢")
    "RET" '(app-launcher-run-app :wk "Emacs App Launcher 🚀")
    "C-g" '(easysession-reset :wk "Reset Session 🔄")
    "z" '(find-file-with-zoxide :wk "Find file with zoxide 🔍"))

  ;; AGENDA AND AI (Enhanced)
  (dt/leader-keys
    "a" '(:ignore t :wk "AI/Agenda")
    ;; Main agenda commands
    "a a" '(org-agenda :wk "Default agenda")
    "a d" '((lambda () (interactive) (org-agenda nil "d")) :wk "Daily workflow 📋")
    "a m" '((lambda () (interactive) (org-agenda nil "m")) :wk "Monthly view 📊")
    "a w" '((lambda () (interactive) (org-agenda nil "w")) :wk "Weekly review 📊")
    "a f" '((lambda () (interactive) (org-agenda nil "f")) :wk "Focus mode 🎯")
    "a H" '((lambda () (interactive) (org-agenda nil "H")) :wk "Habits dashboard 🔄")
    "a c" '((lambda () (interactive) (org-agenda nil "c")) :wk "Clock review ⏰")
    "a p" '((lambda () (interactive) (org-agenda nil "p")) :wk "Planning view 📋")
    "a s" '((lambda () (interactive) (org-agenda nil "s")) :wk "Stuck projects 🚧")
    "a t" '(org-todo-list :wk "All todos")
    "a r" '(org-agenda-redo-all :wk "Refresh all agendas 🔄")
    "a T" '(my/org-agenda-time-context :wk "Time-based agenda ⏰")
    ;; Bulk operations
    "a b" '(:ignore t :wk "Bulk operations")
    "a b m" '(org-agenda-bulk-mark :wk "Mark")
    "a b u" '(org-agenda-bulk-unmark :wk "Unmark")
    "a b U" '(org-agenda-bulk-unmark-all :wk "Unmark all")
    "a b r" '(my/org-agenda-bulk-mark-regexp :wk "Mark by regexp")
    "a b x" '(org-agenda-bulk-action :wk "Execute bulk action")
    ;; Filters
    "a /" '(org-agenda-filter :wk "Filter")
    "a \\" '(org-agenda-filter-remove-all :wk "Remove filters")
    "a <" '(org-agenda-filter-by-category :wk "Filter by category")
    "a >" '(org-agenda-filter-by-tag :wk "Filter by tag")
    "a ^" '(org-agenda-filter-by-top-headline :wk "Filter by headline")
    "a =" '(org-agenda-filter-by-regexp :wk "Filter by regexp")
    "a v" '(org-agenda-columns :wk "Column view 📊")
    "a V" '(org-columns-quit :wk "Exit column view")
    ;; AI subgroup
    "a i" '(:ignore t :wk "AI Tools")
    ;; Copilot Chat main commands
    "a i" '(:ignore t :wk "Github Copilot Chat 💬")
    "a i h" '(copilot-chat-display :wk "Open chat")
    "a i H" '(copilot-chat-hide :wk "Hide chat")
    "a i r" '(copilot-chat-reset :wk "Reset chat 🔄")
    "a i s" '(copilot-chat-switch-to-buffer :wk "Switch to chat")
    "a i m" '(copilot-chat-set-model :wk "Set AI model 🤖")
    "a i q" '(copilot-chat-quotas :wk "Show quotas 📊")
    "a i t" '(copilot-chat-transient :wk "Transient menu ⚡")
    ;; Chat instances
    "a i i" '(:ignore t :wk "Instances 📋")
    "a i i k" '(copilot-chat-kill-instance :wk "Kill instance")
    "a i i s" '(copilot-chat-save :wk "Save instance 💾")
    "a i i l" '(copilot-chat-load :wk "Load instance 📂")
    ;; Code assistance
    "a i c" '(:ignore t :wk "Code 💻")
    "a i c e" '(copilot-chat-explain :wk "Explain code 📖")
    "a i c r" '(copilot-chat-review :wk "Review code 🔍")
    "a i c d" '(copilot-chat-doc :wk "Generate docs 📝")
    "a i c f" '(copilot-chat-fix :wk "Fix code 🔧")
    "a i c o" '(copilot-chat-optimize :wk "Optimize code ⚡")
    "a i c t" '(copilot-chat-test :wk "Write tests 🧪")
    "a i c s" '(copilot-chat-explain-symbol-at-line :wk "Explain symbol 🔤")
    "a i c F" '(copilot-chat-explain-defun :wk "Explain function 📋")
    "a i c b" '(copilot-chat-review-whole-buffer :wk "Review buffer 📄")
    "a i c p" '(copilot-chat-custom-prompt-function :wk "Custom prompt")
    ;; Chat buffer management
    "a i b" '(:ignore t :wk "Buffers 📂")
    "a i b a" '(copilot-chat-add-current-buffer :wk "Add current")
    "a i b d" '(copilot-chat-del-current-buffer :wk "Remove current")
    "a i b w" '(copilot-chat-add-buffers-in-current-window :wk "Add window")
    "a i b f" '(copilot-chat-add-file :wk "Add file")
    "a i b D" '(copilot-chat-add-files-under-dir :wk "Add dir files")
    "a i b W" '(copilot-chat-add-workspace :wk "Add workspace 🌍")
    "a i b l" '(copilot-chat-list :wk "List buffers 📋")
    "a i b +" '(copilot-chat-add-buffers :wk "Add buffers")
    "a i b -" '(copilot-chat-del-buffers :wk "Remove buffers")
    ;; Git integration
    "a i g" '(:ignore t :wk "Git 🔀")
    "a i g c" '(copilot-chat-insert-commit-message :wk "Generate commit")
    "a i g r" '(copilot-chat-regenerate-commit-message :wk "Regenerate commit")
    "a i g t" '(copilot-chat-transient-magit :wk "Magit transient"))

  ;; BUFFERS & BOOKMARKS
  (dt/leader-keys
    "b" '(:ignore t :wk "Buffers/Bookmarks 📚")
    "b b" '(consult-buffer :wk "Switch to buffer 🔄")
    "b B" '(consult-project-buffer :wk "Project buffer 📂")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy 📋")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window 📋")
    "b d" '(bookmark-delete :wk "Delete bookmark 🗑️")
    "b f" '(delete-other-windows :wk "Full screen buffer 🖥️")
    "b i" '(ibuffer :wk "Ibuffer 📊")
    "b j" '(consult-bookmark :wk "Jump to bookmark 🔖")
    "b k" '(kill-current-buffer :wk "Kill current buffer ❌")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers ❌")
    "b l" '(list-bookmarks :wk "List bookmarks 📑")
    "b m" '(bookmark-set :wk "Set bookmark 🔖")
    "b n" '(next-buffer :wk "Next buffer ➡️")
    "b p" '(previous-buffer :wk "Previous buffer ⬅️")
    "b r" '(revert-buffer :wk "Reload buffer 🔄")
    "b R" '(rename-buffer :wk "Rename buffer ✏️")
    "b s" '(basic-save-buffer :wk "Save buffer 💾")
    "b S" '(save-some-buffers :wk "Save multiple buffers 💾")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file 💾"))

  ;; CAPTURE & CLOCK (Enhanced)
  (dt/leader-keys
    "c" '(:ignore t :wk "Capture & Clock")
    ;; Capture templates
    "c c" '(org-capture :wk "Capture menu 📝")
    "c t" '((lambda () (interactive) (org-capture nil "t")) :wk "Quick todo 📋")
    "c n" '((lambda () (interactive) (org-capture nil "n")) :wk "Next action ➡️")
    "c p" '((lambda () (interactive) (org-capture nil "p")) :wk "Priority todo ⭐")
    "c h" '(:ignore t :wk "Habits 🔄")
    "c h d" '((lambda () (interactive) (org-capture nil "h")) :wk "Daily")
    "c h w" '((lambda () (interactive) (org-capture nil "H")) :wk "Weekdays")
    "c h a" '((lambda () (interactive) (org-capture nil "W")) :wk "Weekdays Alt")
    "c h m" '((lambda () (interactive) (org-capture nil "1")) :wk "Monday")
    "c h t" '((lambda () (interactive) (org-capture nil "2")) :wk "Tuesday")
    "c h W" '((lambda () (interactive) (org-capture nil "3")) :wk "Wednesday")
    "c h T" '((lambda () (interactive) (org-capture nil "4")) :wk "Thursday")
    "c h f" '((lambda () (interactive) (org-capture nil "5")) :wk "Friday")
    "c h s" '((lambda () (interactive) (org-capture nil "6")) :wk "Saturday")
    "c h S" '((lambda () (interactive) (org-capture nil "7")) :wk "Sunday")
    "c h e" '((lambda () (interactive) (org-capture nil "e")) :wk "Exercise")
    "c i" '((lambda () (interactive) (org-capture nil "i")) :wk "Interruption ⚠️")
    "c w" '((lambda () (interactive) (org-capture nil "w")) :wk "Work task 💼")
    "c r" '((lambda () (interactive) (org-capture nil "r")) :wk "Personal task 🏠")
    "c m" '((lambda () (interactive) (org-capture nil "m")) :wk "Meeting 👥")
    "c e" '((lambda () (interactive) (org-capture nil "e")) :wk "Exercise 💪")
    "c l" '((lambda () (interactive) (org-capture nil "l")) :wk "Learning 📚")
    "c N" '((lambda () (interactive) (org-capture nil "N")) :wk "Note 📝")
    "c b" '((lambda () (interactive) (org-capture nil "b")) :wk "Bookmark 🔖")
    "c B" '((lambda () (interactive) (org-capture nil "B")) :wk "Birthday 🎂")
    ;; Clock management
    "c L" '(my/org-clock-in-last-task :wk "Clock in last ⏰")
    "c g" '(org-clock-goto :wk "Go to current clock 🎯")
    "c R" '(org-clock-report :wk "Clock report 📊")
    "c C" '(my/org-clock-in-and-track :wk "Clock in & track 🚀")
    "c s" '(org-clock-select-task :wk "Switch clock 🔄")
    "c d" '(org-clock-display :wk "Display clocks 📊")
    "c x" '(org-clock-cancel :wk "Cancel clock ❌")
    "c j" '(org-clock-jump-to-current-clock :wk "Jump to clock 🎯")
    "c E" '(org-clock-modify-effort-estimate :wk "Modify effort ⏱️")
    "c S" '(org-clock-timestamps-up :wk "Clock timestamp up ⬆️")
    "c D" '(org-clock-timestamps-down :wk "Clock timestamp down ⬇️")
    ;; Processing
    "c T" '(org-agenda-toggle-completed :wk "Toggle completed view 👁️"))

  ;; Leader key bindings for CSV
  (dt/leader-keys
    "C" '(:ignore t :wk "CSV & Tables 📊")
    
    ;; Alignment
    "C a" '(csv-align-fields :wk "Align fields ⬌")
    "C u" '(csv-unalign-fields :wk "Unalign fields ⬋")
    "C c" '(csv-to-org-table :wk "CSV → Org 🔄")
    "C h" '(csv-header-line :wk "CSV header")
    
    ;; Sorting
    "C s" '(:ignore t :wk "Sort 🔢")
    "C s s" '(csv-sort-fields :wk "Sort fields")
    "C s n" '(csv-sort-numeric-fields :wk "Sort numeric")
    "C s r" '(csv-reverse-region :wk "Reverse order")
    
    ;; Field operations
    "C f" '(:ignore t :wk "Fields ⬜")
    "C f k" '(csv-kill-fields :wk "Kill fields")
    "C f y" '(csv-yank-fields :wk "Yank fields")
    "C f t" '(csv-toggle-invisibility :wk "Toggle invisible")
    "C f h" '(csv-header-line :wk "Toggle header")
    
    ;; Org table operations (when in org-mode)
    "C o" '(:ignore t :wk "Org Tables 📋")
    "C o a" '(org-table-align :wk "Align table")
    "C o c" '(org-table-create :wk "Create table")
    "C o |" '(org-table-create-or-convert-from-region :wk "Region → table")
    
    ;; Navigation
    "C o n" '(:ignore t :wk "Navigate →")
    "C o n f" '(org-table-next-field :wk "Next field")
    "C o n b" '(org-table-previous-field :wk "Previous field")
    
    ;; Row operations
    "C o r" '(:ignore t :wk "Rows ↕")
    "C o r i" '(org-table-insert-row :wk "Insert row")
    "C o r k" '(org-table-kill-row :wk "Delete row")
    "C o r u" '(org-table-move-row-up :wk "Move row up")
    "C o r d" '(org-table-move-row-down :wk "Move row down")
    "C o r h" '(org-table-insert-hline :wk "Insert hline")
    "C o r s" '(org-table-sort-lines :wk "Sort rows")
    
    ;; Column operations
    "C o c" '(:ignore t :wk "Columns ↔")
    "C o c i" '(org-table-insert-column :wk "Insert column")
    "C o c k" '(org-table-delete-column :wk "Delete column")
    "C o c l" '(org-table-move-column-left :wk "Move left")
    "C o c r" '(org-table-move-column-right :wk "Move right")
    
    ;; Formulas & calculations
    "C o f" '(:ignore t :wk "Formulas 🧮")
    "C o f =" '(org-table-eval-formula :wk "Eval formula")
    "C o f e" '(org-table-edit-formulas :wk "Edit formulas")
    "C o f +" '(org-table-sum :wk "Sum column")
    
    ;; Export/Import
    "C o e" '(:ignore t :wk "Export/Import 📤")
    "C o e e" '(org-table-export :wk "Export table")
    "C o e i" '(org-table-import :wk "Import table")
    
    ;; Misc
    "C o h" '(org-table-header-line-mode :wk "Toggle sticky header")
    "C o w" '(org-table-wrap-region :wk "Wrap region")

    ;; Conversion
    "C c" '(:ignore t :wk "Convert 🔄")
    "C c o" '(csv-to-org-table :wk "To Org table")
    "C c e" '(org-table-export :wk "Export table")
    "C c i" '(org-table-import :wk "Import table")
    
    ;; Column operations
    "C t" '(:ignore t :wk "Transform 🔧")
    "C t t" '(csv-transpose :wk "Transpose")
    "C t k" '(csv-kill-fields :wk "Delete column")
    
    ;; View options
    "C v" '(:ignore t :wk "View 👁️")
    "C v h" '(hl-line-mode :wk "Highlight line")
    "C v t" '(toggle-truncate-lines :wk "Toggle truncate")
    "C v w" '(visual-line-mode :wk "Visual line mode"))

  ;; DIRED
  (dt/leader-keys
    "d" '(:ignore t :wk "Dired 📂")
    "d d" '(dired :wk "Open dired 📂")
    "d f" '(wdired-finish-edit :wk "Finish writable dired edit ✅")
    "d j" '(dired-jump :wk "Jump to current file in dired 🎯")
    "d n" '(neotree-dir :wk "Open directory in neotree 🌳")
    "d p" '(peep-dired :wk "Peep-dired 👁️")
    "d w" '(wdired-change-to-wdired-mode :wk "Enable writable dired ✏️"))

  ;; EVALUATION & EXECUTION
  (dt/leader-keys
    "e" '(:ignore t :wk "Eval/Eshell/Ediff/EWW ⚡")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer 📄")
    "e d" '(eval-defun :wk "Evaluate defun at point 🔧")
    "e e" '(eval-expression :wk "Evaluate elisp expression ⚡")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point ⚡")
    "e r" '(eval-region :wk "Evaluate elisp in region 📝")
    "e f" '(ediff-files :wk "Ediff files 🔀")
    "e F" '(ediff-files3 :wk "Ediff three files 🔀")
    "e h" '(consult-history :wk "Eshell history 📜")
    "e n" '(eshell-new :wk "Create new eshell buffer ➕")
    "e s" '(eshell :wk "Eshell 💻")
    "e w" '(eww :wk "EWW emacs web browser 🌐")
    "e R" '(eww-reload :wk "Reload current page in EWW 🔄"))

  ;; FILES
  (dt/leader-keys
    "f" '(:ignore t :wk "Files 📁")
    "f c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Open config.org ⚙️")
    "f e" '((lambda () (interactive) (dired "~/.emacs.d/")) :wk "Open .emacs.d in dired 📂")
    "f d" '(find-grep-dired :wk "Search for string in files in DIR 🔍")
    "f g" '(consult-line :wk "Search in current file 🔍")
    "f i" '((lambda () (interactive) (find-file "~/.emacs.d/init.el")) :wk "Open init.el 🔧")
    "f j" '(consult-find :wk "Find file in subdirectories 🔍")
    "f l" '(consult-locate :wk "Locate file 📍")
    "f r" '(consult-recent-file :wk "Recent files 🕐")
    "f u" '(sudo-edit-find-file :wk "Sudo find file 🔐")
    "f U" '(sudo-edit :wk "Sudo edit current file 🔐"))

  ;; GIT
  (dt/leader-keys
    "g" '(:ignore t :wk "Git")
    "g /" '(magit-dispatch :wk "Magit dispatch")
    "g ." '(magit-file-dispatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create")
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find")
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-unstage-file :wk "Git unstage file"))

  ;; HELP
  (dt/leader-keys
    "h" '(:ignore t :wk "Help ❓")
    "h a" '(apropos :wk "Apropos 🔍")
    "h b" '(describe-bindings :wk "Describe bindings ⌨️")
    "h c" '(describe-char :wk "Describe character under cursor 🔤")
    "h d" '(:ignore t :wk "Emacs documentation 📚")
    "h d a" '(about-emacs :wk "About Emacs ℹ️")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging 🐛")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ ❓")
    "h d m" '(info-emacs-manual :wk "The Emacs manual 📖")
    "h d n" '(view-emacs-news :wk "View Emacs news 📰")
    "h d o" '(describe-distribution :wk "How to obtain Emacs 📦")
    "h d p" '(view-emacs-problems :wk "View Emacs problems ⚠️")
    "h d t" '(view-emacs-todo :wk "View Emacs todo 📝")
    "h d w" '(describe-no-warranty :wk "Describe no warranty ⚖️")
    "h e" '(view-echo-area-messages :wk "View echo area messages 💬")
    "h f" '(describe-function :wk "Describe function 🔧")
    "h F" '(describe-face :wk "Describe face 🎨")
    "h g" '(describe-gnu-project :wk "Describe GNU Project 🐃")
    "h i" '(info :wk "Info ℹ️")
    "h I" '(describe-input-method :wk "Describe input method ⌨️")
    "h k" '(describe-key :wk "Describe key 🔑")
    "h l" '(view-lossage :wk "Display recent keystrokes 📜")
    "h L" '(describe-language-environment :wk "Describe language environment 🌍")
    "h m" '(describe-mode :wk "Describe mode 📋")
    "h r" '(:ignore t :wk "Reload 🔄")
    "h r r" '((lambda () (interactive)
                (load-file "~/.emacs.d/init.el")
                (ignore (elpaca-process-queues)))
              :wk "Reload emacs config 🔄")
    "h t" '(load-theme :wk "Load theme 🎨")
    "h v" '(describe-variable :wk "Describe variable 📊")
    "h w" '(where-is :wk "Prints keybinding for command 🔍")
    "h x" '(describe-command :wk "Display full documentation for command 📋"))

  ;; HABITS
  (dt/leader-keys
    "H" '(:ignore t :wk "Habits")
    "H d" '((lambda () (interactive) (org-agenda nil "H")) :wk "Habits dashboard 🔄")
    "H s" '(my/org-habit-streak :wk "Show habit streak 📊")
    "H t" '((lambda () (interactive)
              (setq org-habit-show-habits (not org-habit-show-habits))
              (when (derived-mode-p 'org-agenda-mode) 
                (org-agenda-redo))
              (message "Habits display: %s" 
                       (if org-habit-show-habits "ON" "OFF"))) :wk "Toggle habits view 👁️")
    "H c" '((lambda () (interactive) (org-capture nil "h")) :wk "Create new habit ➕")
    "H C" '((lambda () (interactive) (org-capture nil "H")) :wk "Create new weekday habit ➕")
    "H a" '(org-habit-stats :wk "Habit statistics 📊"))

  (dt/leader-keys
    "i" '(:ignore t :wk "Images")
    "i i" '(my/org-toggle-inline-images :wk "Toggle inline images 🖼️")
    "i r" '(my/org-refresh-inline-images :wk "Refresh images 🔄")
    "i s" '(my/org-insert-screenshot :wk "Insert screenshot 📷")
    "i c" '(my/org-insert-clipboard-image :wk "Insert from clipboard 📋")
    "i d" '(org-download-yank :wk "Download & insert from URL ⬇️")
    "i D" '(org-download-delete :wk "Delete image at point 🗑️")
    "i l" '(my/org-insert-image-link :wk "Insert image link 🔗")
    "i w" '(my/org-download-set-image-width :wk "Set next image width ↔️")
    "i R" '(my/org-resize-image-at-point :wk "Resize image at point 📐")
    "i e" '(org-download-edit :wk "Edit image at point ✏️")
    ;; Attachment operations
    "i a" '(:ignore t :wk "Attachments")
    "i a a" '(org-attach :wk "Attach menu 📎")
    "i a f" '(org-attach-attach :wk "Attach file 📁")
    "i a c" '(my/org-attach-clipboard :wk "Attach from clipboard 📋")
    "i a s" '(org-attach-screenshot :wk "Attach screenshot 📷")
    "i a l" '(my/org-attach-file-and-insert-link :wk "Attach & insert link 🔗")
    "i a o" '(org-attach-open :wk "Open attachment 📂")
    "i a O" '(org-attach-open-in-emacs :wk "Open in Emacs 📂")
    "i a r" '(org-attach-reveal :wk "Reveal in file manager 👁️")
    "i a d" '(org-attach-delete-all :wk "Delete all attachments 🗑️")
    "i a D" '(org-attach-delete-one :wk "Delete one attachment 🗑️")
    "i a n" '(org-attach-new :wk "Create new attachment 📝")
    "i a z" '(org-attach-sync :wk "Sync attachments 🔄"))

  ;; JUMP/AVY
  (dt/leader-keys
    "j" '(:ignore t :wk "Jump/Avy 🎯")
    "j j" '(avy-goto-char-timer :wk "Jump to char timer ⏱️")
    "j c" '(avy-goto-char :wk "Jump to char 🔤")
    "j l" '(avy-goto-line :wk "Jump to line 📏")
    "j w" '(avy-goto-word-1 :wk "Jump to word 📝"))

  ;; COMPILE
  (dt/leader-keys
    "k" '(:ignore t :wk "Compile 🔨")
    "k k" '(compile :wk "Compile 🔨")
    "k r" '(recompile :wk "Recompile 🔄"))

  ;; LSP
  (dt/leader-keys
    "l" '(:ignore t :wk "LSP 🔧")
    "l a" '(lsp-execute-code-action :wk "Code action ⚡")
    "l d" '(lsp-find-definition :wk "Find definition 🎯")
    "l D" '(lsp-find-declaration :wk "Find declaration 📋")
    "l f" '(lsp-format-buffer :wk "Format buffer ✨")
    "l h" '(lsp-describe-thing-at-point :wk "Describe at point ❓")
    "l i" '(lsp-find-implementation :wk "Find implementation 🔍")
    "l o" '(lsp-organize-imports :wk "Organize imports 📦")
    "l r" '(lsp-find-references :wk "Find references 🔗")
    "l R" '(lsp-rename :wk "Rename symbol ✏️")
    "l s" '(lsp-signature-activate :wk "Signature help ✍️")
    "l t" '(lsp-find-type-definition :wk "Find type definition 🔍")
    "l u" '(lsp-ui-doc-show :wk "Show documentation 📖")
    "l w" '(lsp-describe-session :wk "Describe session 📋")
    "l W" '(lsp-workspace-restart :wk "Restart workspace 🔄")
    "l p" '(:ignore t :wk "Peek 👁️")
    "l p d" '(lsp-ui-peek-find-definitions :wk "Peek definitions 👁️")
    "l p i" '(lsp-ui-peek-find-implementation :wk "Peek implementation 👁️")
    "l p r" '(lsp-ui-peek-find-references :wk "Peek references 👁️"))

  ;; ORG-MODE
  (dt/leader-keys
    "m" '(:ignore t :wk "Org Mode 📝")
    "m '" '(org-edit-special :wk "Edit src block ✏️")
    "m ," '(org-edit-src-exit :wk "Exit src block ❌")
    "m B" '(org-babel-tangle :wk "Babel tangle 🔀")
    "m e" '(org-export-dispatch :wk "Export dispatch 📤")
    "m i" '(org-toggle-item :wk "Toggle item 🔘")
    "m l" '(org-insert-link :wk "Insert link 🔗")
    "m s" '(org-insert-structure-template :wk "Insert src block 📋")
    "m t" '(org-todo :wk "Todo ✅")
    "m T" '(org-todo-list :wk "Todo list 📋")
    "m b" '(:ignore t :wk "Tables 📊")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table ➖")
    "m d" '(:ignore t :wk "Date/deadline 📅")
    "m d t" '(org-time-stamp :wk "Time stamp 🕐"))

  ;; NOTES (Org-roam)
  (dt/leader-keys
    "n" '(:ignore t :wk "Notes (Org-roam)")
    "n a" '(org-roam-alias-add :wk "Add alias")
    "n A" '(org-roam-alias-remove :wk "Remove alias")
    "n c" '(org-roam-capture :wk "Capture to node")
    "n f" '(org-roam-node-find :wk "Find node")
    "n g" '(org-roam-ui-mode :wk "UI mode on browser")
    "n i" '(org-roam-node-insert :wk "Insert node")
    "n l" '(org-roam-buffer-toggle :wk "Toggle roam buffer")
    "n o" '(org-id-get-create :wk "Add ID to heading")
    "n r" '(org-roam-node-random :wk "Random node")
    "n s" '(org-roam-db-sync :wk "Sync database")
    "n t" '(org-roam-tag-add :wk "Add tag")
    "n T" '(org-roam-tag-remove :wk "Remove tag"))

  ;; OPEN/LAUNCH
  (dt/leader-keys
    "o" '(:ignore t :wk "Open/Launch 🚀")
    "o a" '(org-agenda :wk "Agenda 📅")
    "o A" '(org-archive-subtree :wk "Archive subtree 📦")
    "o c" '(org-capture :wk "Org capture 📝")
    "o d" '(dashboard-open :wk "Dashboard 🏠")
    "o e" '(org-set-effort :wk "Set effort estimate ⏱️")
    "o f" '(make-frame :wk "New frame 🖼️")
    "o F" '(select-frame-by-name :wk "Select frame by name 🎯")
    "o l" '(org-store-link :wk "Store link 🔗")
    "o T" '(my/quick-tag-task :wk "Quick tag 🏷️")
    "o t" '(:ignore t :wk "Todo/Tasks ✅")
    "o s" '(my/sync-all-calendars :wk "Sync calendars 🔄")
    "o t d" '(org-deadline :wk "Set deadline ⏰")
    "o t p" '(org-priority :wk "Set priority ⭐")
    "o t r" '(org-refile :wk "Refile task 📂")
    "o t s" '(org-schedule :wk "Schedule task 📅")
    "o t t" '(org-todo :wk "Cycle todo state 🔄"))

  ;; PROJECTS
  (dt/leader-keys
    "p" '(projectile-command-map :wk "Projectile 📂"))

  ;; READING/DOCUMENTS
  (dt/leader-keys
    "r" '(:ignore t :wk "Reading/Documents 📖")
    "r m" '(nov-display-metadata :wk "Display metadata ℹ️")
    "r n" '(nov-next-document :wk "Next chapter ➡️")
    "r o" '(find-file :wk "Open file 📂")
    "r p" '(nov-previous-document :wk "Previous chapter ⬅️")
    "r r" '(nov-render-document :wk "Re-render document 🔄")
    "r t" '(nov-goto-toc :wk "Go to TOC 📑")
    "r v" '(nov-view-source :wk "View source 🔍")
    "r V" '(nov-view-content-source :wk "View content source 🔍"))

  ;; SEARCH
  (dt/leader-keys
    "s" '(:ignore t :wk "Search 🔍")
    "s f" '(consult-find :wk "Find files 📁")
    "s g" '(consult-ripgrep :wk "Ripgrep 🔍")
    "s G" '(consult-git-grep :wk "Git grep 🔍")
    "s i" '(consult-imenu :wk "Imenu 📋")
    "s I" '(consult-imenu-multi :wk "Imenu multi-buffer 📋")
    "s l" '(consult-locate :wk "Locate 📍")
    "s m" '(consult-mark :wk "Mark 🔖")
    "s M" '(consult-global-mark :wk "Global mark 🌍")
    "s o" '(consult-outline :wk "Outline 📑")
    "s O" '(pdf-occur :wk "PDF search lines 📄")
    "s p" '(man :wk "Man pages 📖")
    "s s" '(consult-line :wk "Search line 📏")
    "s S" '(consult-line-multi :wk "Search line multi-buffer 📏")
    "s t" '(tldr :wk "TLDR docs 📚")
    "s w" '(woman :wk "Woman (man alternative) 📖"))

  ;; SESSIONS
  (dt/leader-keys
    "S" '(:ignore t :wk "Sessions 💾")
    "S d" '(easysession-delete :wk "Delete session 🗑️")
    "S l" '(easysession-load :wk "Load session 📂")
    "S L" '(easysession-switch-to-and-restore-geometry :wk "Load session with geometry 🖼️")
    "S r" '(easysession-rename :wk "Rename session ✏️")
    "S s" '(easysession-save-as :wk "Save session as 💾")
    "S S" '(easysession-save :wk "Save session 💾"))

  ;; TASK STATES  
  (dt/leader-keys
    "t" '(:ignore t :wk "Toggle/Task States 🔄")
    "t t" '((lambda () (interactive) 
              (if (derived-mode-p 'org-agenda-mode)
                  (org-agenda-todo)
                (org-todo))) :wk "Cycle states 🔄")
    "t c" '(calendar :wk "Toggle calendar 📅")
    "t f" '(flycheck-mode :wk "Toggle flycheck ✓")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers 🔢")
    "t n" '(neotree-toggle :wk "Toggle neotree file viewer 🌳")
    "t v" '(vterm-toggle :wk "Toggle vterm 💻")
    "t V" '(my/vterm-toggle-fullscreen :wk "Toggle vterm Fullscreen 💻"))

  (dt/leader-keys
    "v" '(:ignore t :wk "Virtual Environments 🐍")
    "v a" '(pyvenv-activate :wk "Activate venv ✅")
    "v d" '(pyvenv-deactivate :wk "Deactivate venv ❌")
    "v w" '(pyvenv-workon :wk "Work on venv 🔧"))

  ;; WINDOWS
  (dt/leader-keys
    "w" '(:ignore t :wk "Windows 🪟")
    "w c" '(evil-window-delete :wk "Close window ❌")
    "w n" '(evil-window-new :wk "New window ➕")
    "w s" '(evil-window-split :wk "Horizontal split ➖")
    "w v" '(evil-window-vsplit :wk "Vertical split ➗")
    "w h" '(evil-window-left :wk "Window left ⬅️")
    "w j" '(evil-window-down :wk "Window down ⬇️")
    "w k" '(evil-window-up :wk "Window up ⬆️")
    "w l" '(evil-window-right :wk "Window right ➡️")
    "w w" '(evil-window-next :wk "Next window 🔄")
    "w H" '(buf-move-left :wk "Move buffer left ⬅️")
    "w J" '(buf-move-down :wk "Move buffer down ⬇️")
    "w K" '(buf-move-up :wk "Move buffer up ⬆️")
    "w L" '(buf-move-right :wk "Move buffer right ➡️"))

  ;; ============================================================================
  ;; LOCAL LEADER KEYBINDINGS (using , for mode-specific commands)
  ;; ============================================================================

  (general-create-definer dt/local-leader-keys
    :states '(normal visual motion)
    :prefix ","
    :prefix-name "Local Leader")

  ;; Org-agenda mode local keybindings (Evil-aware)
  (with-eval-after-load 'org-agenda
    (dt/local-leader-keys
      :keymaps 'org-agenda-mode-map
      ;; Task management
      "t" '(org-agenda-todo :wk "Cycle TODO state 🔄")
      "T" '(org-agenda-toggle-completed :wk "Toggle completed 👁️")
      "s" '(org-agenda-schedule :wk "Schedule 📅")
      "d" '(org-agenda-deadline :wk "Set deadline ⏰")
      "p" '(org-agenda-priority :wk "Set priority ⭐")
      "e" '(org-agenda-set-effort :wk "Set effort ⏱️")
      "r" '(org-agenda-refile :wk "Refile 📂")
      "a" '(org-agenda-archive :wk "Archive 📦")
      "f" '(org-agenda-set-tags :wk "Set tags 🏷️")
      ;; Clock
      "I" '(org-agenda-clock-in :wk "Clock in ⏰")
      "O" '(org-agenda-clock-out :wk "Clock out ⏹️")
      "c" '(calendar :wk "Toggle calendar 📅")
      "C" '(org-agenda-clock-cancel :wk "Cancel clock ❌")
      "G" '(org-agenda-clock-goto :wk "Go to clock 🎯")
      ;; Views
      "v" '(org-agenda-view-mode-dispatch :wk "View dispatch 👁️")
      "R" '(org-agenda-redo :wk "Refresh 🔄")
      "F" '(org-agenda-follow-mode :wk "Follow mode 👀")
      "L" '(org-agenda-log-mode :wk "Log mode 📋")
      "D" '(org-agenda-toggle-diary :wk "Toggle diary 📓")
      "!" '(org-agenda-toggle-deadlines :wk "Toggle deadlines ⚠️")
      "v" '(org-agenda-columns :wk "Column view 📊")
      "V" '(org-columns-quit :wk "Exit column view")
      ;; Navigation
      "[" '(org-agenda-earlier :wk "Earlier ⬅️")
      "]" '(org-agenda-later :wk "Later ➡️")
      "." '(org-agenda-goto-today :wk "Go to today 📅")
      "K" '(org-agenda-backward-block :wk "Previous block ⬆️")
      "g" '(org-agenda-goto :wk "Go to entry 🎯")
      "TAB" '(org-agenda-goto :wk "Go to entry 🎯")
      "RET" '(org-agenda-switch-to :wk "Switch to entry 🔄")
      ;; Time views
      "w" '(org-agenda-week-view :wk "Week view 📆")
      "m" '(org-agenda-month-view :wk "Month view 📅")
      "Y" '(org-agenda-year-view :wk "Year view 📘")
      "1" '(org-agenda-day-view :wk "Day view 📋")
      ;; Bulk operations
      "x" '(org-agenda-bulk-mark :wk "Mark ✓")
      "X" '(org-agenda-bulk-unmark-all :wk "Unmark all ✗")
      "b" '(org-agenda-bulk-action :wk "Bulk action ⚡"))))

(add-hook 'org-agenda-mode-hook
          (lambda ()
            ;; Force motion state
            (when (bound-and-true-p evil-mode)
              (evil-motion-state))
            ;; Remove any conflicting org-agenda default bindings
            (local-unset-key (kbd "j"))
            (local-unset-key (kbd "k"))
            ;; Set Evil bindings with high priority
            (evil-local-set-key 'motion (kbd "j") 'evil-next-line)
            (evil-local-set-key 'motion (kbd "k") 'evil-previous-line)))
#+end_src

* GOLDEN RATIO
Automatically resizes the window in focus, using the golden ratio to redefine the size of all windows.

#+begin_src emacs-lisp
(use-package golden-ratio
  :ensure t
  :config
  (golden-ratio-mode 1)
  (setq golden-ratio-auto-scale t)
  (setq golden-ratio-adjust-factor 1.0)
  (setq golden-ratio-wide-adjust-factor 0.6)

  ;; Exclude neotree buffer
  (add-to-list 'golden-ratio-exclude-buffer-names " *NeoTree*")
  
  ;; Force golden-ratio on window focus changes
  (add-hook 'window-configuration-change-hook 'golden-ratio)

  ;; Reduce excluded modes if too restrictive
  (setq golden-ratio-exclude-modes '())

  ;; Inhibit golden-ratio when which-key is active
  (setq golden-ratio-inhibit-functions
        '((lambda () (bound-and-true-p which-key--pages-obj))))
  
  ;; Optional: exclude specific modes that cause issues
  ;; (add-to-list 'golden-ratio-exclude-modes 'ediff-mode)

(advice-add 'select-window :after (lambda (&rest _) (golden-ratio))))
#+end_src

* HIGHLIGHT TODO
Adding highlights to TODO and related words.

#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

* INDENTATION

** dtrt-indent
An Emacs minor mode that guesses the indentation offset originally used for creating source code files and transparently adjusts the corresponding settings in Emacs, making it more convenient to edit foreign files.
#+begin_src emacs-lisp
(use-package dtrt-indent
  :ensure t
  :config
  (dtrt-indent-global-mode 1))
#+end_src

** Indent Bars
This provides indentation bars to my code.
#+begin_src emacs-lisp
(use-package indent-bars
  :ensure t
  :custom
  (indent-bars-no-descend-lists t) ; no extra bars in continued func arg lists
  (indent-bars-treesit-support t)
  (indent-bars-treesit-ignore-blank-lines-types '("module"))
  ;; Add other languages as needed
  (indent-bars-treesit-scope '((python function_definition class_definition for_statement
	  if_statement with_statement while_statement)))
  ;; Note: wrap may not be needed if no-descend-list is enough
  ;;(indent-bars-treesit-wrap '((python argument_list parameters ; for python, as an example
  ;;				      list list_comprehension
  ;;				      dictionary dictionary_comprehension
  ;;				      parenthesized_expression subscript)))
  :hook ((python-base-mode yaml-mode) . indent-bars-mode))
#+end_src

* LANGUAGE SUPPORT
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.

** Apheleia formatting
Good code is automatically formatted by tools like Black or Prettier so that you and your team spend less time on formatting and more time on building features. It's best if your editor can run code formatters each time you save a file, so that you don't have to look at badly formatted code or get surprised when things change just before you commit. 
#+begin_src emacs-lisp
(use-package apheleia
  :ensure t
  :config
  ;; Simple ruff configuration - uses ruff from PATH
  (setf (alist-get 'python-mode apheleia-mode-alist) 'ruff)
  (setf (alist-get 'python-ts-mode apheleia-mode-alist) 'ruff)

  ;; Elisp formatting using built-in
  (setf (alist-get 'emacs-lisp-mode apheleia-mode-alist) 'lisp-indent)
  (setf (alist-get 'lisp-interaction-mode apheleia-mode-alist) 'lisp-indent)

  ;; Enable for programming modes
  :hook (prog-mode . apheleia-mode)
  :hook (org-mode . apheleia-mode))

;; Helper function to find project venv
(defun my/find-project-venv ()
  "Find the virtual environment for the current project."
  (when-let* ((project-root (or (project-root (project-current))
                                (locate-dominating-file default-directory ".git")
                                (locate-dominating-file default-directory "pyproject.toml")
                                (locate-dominating-file default-directory "uv.lock")
                                default-directory))
              (venv-path (cond
                          ((file-directory-p (concat project-root ".venv/"))
                           (concat project-root ".venv/"))
                          ((file-directory-p (concat project-root "venv/"))
                           (concat project-root "venv/"))
                          ((file-directory-p (concat project-root "env/"))
                           (concat project-root "env/")))))
    (when (file-directory-p venv-path)
      venv-path)))

;; Ensure project's venv is in PATH for ruff
(defun my/update-path-for-venv ()
  "Add current project's venv bin to PATH."
  (when-let ((venv (my/find-project-venv)))
    (setenv "PATH" (concat venv "bin:" (getenv "PATH")))
    (setq exec-path (cons (concat venv "bin") exec-path))))

;; Update PATH when entering Python files
(add-hook 'python-mode-hook #'my/update-path-for-venv)
(add-hook 'python-ts-mode-hook #'my/update-path-for-venv)
#+end_src

** General
Configuration when opening files in the terminal.
#+begin_src emacs-lisp
(defun base64-encode-region-prefix-arg (&rest _args)
  "Pass prefix arg as third arg to `base64-encode-region'."
  (interactive "r\nP"))
(advice-add 'base64-encode-region :before #'base64-encode-region-prefix-arg)

(setq comint-terminfo-terminal "xterm-256color")

(defun endless/colorize-compilation ()
  "Colorize from `compilation-filter-start' to `point'."
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region
     compilation-filter-start (point))))

(add-hook 'compilation-filter-hook
          #'endless/colorize-compilation)
#+end_src

** Lua
Defines a lua-mode.
#+begin_src emacs-lisp
(use-package lua-mode
  :ensure t)
#+end_src

** Tree-sitter
Tree Sitter capabilities.
#+begin_src emacs-lisp
(use-package treesit-auto
  :ensure t
  :config
  (setq treesit-auto-install 'prompt)
  (global-treesit-auto-mode))

(use-package python-ts-mode
  :ensure nil
  :mode ("\\.py\\'" . python-ts-mode)
  :interpreter ("python" . python-ts-mode)
  :config
  (setq python-ts-mode-hook python-mode-hook)
  (setq python-indent-offset 4)
  (setq python-shell-interpreter "python3")
  (setq python-shell-interpreter-args "-i")
  ;; Fix the prompt detection
  (setq python-shell-prompt-detect-failure-warning nil)
  (setq python-shell-completion-native-enable nil))
#+end_src

** LSP
Add and configure the lsp-mode for major programming languages.
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook (
         (python-ts-mode . lsp)
         (python-mode . lsp)
         (lsp-mode . lsp-enable-which-key-integration))
  :config
  ;; Disable other Python servers
  (setq lsp-disabled-clients '(pylsp mspyls ruff-lsp ty-ls))

  ;; Disable company-mode integration completely
  (setq lsp-auto-configure nil)
  
  ;; Enable LSP completion with Corfu
  (setq lsp-completion-provider :capf)  ; Use completion-at-point-functions
  (setq lsp-completion-enable t)
  (setq lsp-completion-show-detail t)
  (setq lsp-completion-show-kind t)
  (setq lsp-completion-enable-additional-text-edit t)  ; Enable auto-imports
  
  ;; Performance settings
  (setq lsp-log-io nil)
  (setq lsp-semantic-tokens-enable t)
  (setq lsp-semantic-tokens-honor-refresh-requests t)
  (setq lsp-semantic-tokens-apply-modifiers t)
  (setq lsp-print-performance nil)
  (setq lsp-idle-delay 0.3)  ; Faster response for completion triggers
  (setq lsp-signature-auto-activate nil)  ; Disable signature help - basedpyright doesn't support it
  (setq lsp-signature-render-documentation nil)
  
  ;; Ensure completion is triggered properly
  (setq lsp-completion-filter-on-incomplete t)
  (setq lsp-enable-snippet t)
  
  ;; Enable hover documentation (different from signature help)
  (setq lsp-eldoc-enable-hover t)
  (setq lsp-eldoc-render-all nil)
  :commands (lsp))

;; Function to find basedpyright in current project's venv
(defun my/find-basedpyright-in-venv ()
  "Find basedpyright-langserver in the current project's virtual environment."
  (when-let* ((project-root (or (project-root (project-current))
                                (locate-dominating-file default-directory ".git")
                                (locate-dominating-file default-directory "pyproject.toml")
                                (locate-dominating-file default-directory "uv.lock")
                                default-directory))
              (venv-path (cond
                          ((file-directory-p (concat project-root ".venv/"))
                           (concat project-root ".venv/"))
                          ((file-directory-p (concat project-root "venv/"))
                           (concat project-root "venv/"))
                          ((file-directory-p (concat project-root "env/"))
                           (concat project-root "env/"))))
              (basedpyright-cmd (concat venv-path "bin/basedpyright-langserver")))
    (when (file-executable-p basedpyright-cmd)
      basedpyright-cmd)))

;; Configure lsp-pyright to use basedpyright from the active venv
(use-package lsp-pyright
  :ensure t
  :after lsp-mode
  :config
  ;; Use basedpyright
  (setq lsp-pyright-langserver-command "basedpyright")

  ;; Override the LSP client to use project-local basedpyright
  (setq lsp-pyright-langserver-command-args '("--stdio"))

  ;; Basedpyright specific settings
  (setq lsp-pyright-typechecking-mode "basic")
  (setq lsp-pyright-auto-import-completions t)
  (setq lsp-pyright-auto-search-paths t)
  (setq lsp-pyright-prefer-remote-env nil)
  (setq lsp-pyright-multi-root t))

;; Register custom basedpyright client that uses project-local installation
(with-eval-after-load 'lsp-mode
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-stdio-connection
                     (lambda ()
                       (if-let ((local-basedpyright (my/find-basedpyright-in-venv)))
                           (list local-basedpyright "--stdio")
                         ;; Fallback to global basedpyright
                         (list "basedpyright-langserver" "--stdio"))))
    :activation-fn (lsp-activate-on "python")
    :server-id 'basedpyright-local
    :major-modes '(python-mode python-ts-mode)
    :priority 15  ; Higher priority than the default pyright client
    :initialized-fn (lambda (workspace)
                      (with-lsp-workspace workspace
                        (lsp--set-configuration
                         (make-hash-table :test 'equal)))))))

(with-eval-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
  (yas-global-mode))

;; Explicitly disable any company-mode integration
(with-eval-after-load 'lsp-mode
  (setq lsp-auto-configure nil)
  (when (boundp 'lsp-disabled-clients)
    (setq lsp-disabled-clients (append lsp-disabled-clients '(company-capf))))
  ;; Remove company from completion styles if present
  (when (boundp 'completion-styles)
    (setq completion-styles (delq 'company completion-styles))))

(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode
  :after lsp-mode
  :custom
  (lsp-ui-peek-always-show nil)
  (lsp-ui-sideline-show-hover nil)
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-show-with-cursor nil)      ; Show doc on cursor hover
  (lsp-ui-doc-show-with-mouse t)       ; Show doc on mouse hover
  (lsp-ui-doc-delay 0.5)               ; Delay before showing doc
  (lsp-ui-doc-position 'at-point)      ; Show doc at point
  (lsp-ui-doc-max-width 120)
  (lsp-ui-doc-max-height 30)
  :hook (lsp-mode . lsp-ui-mode))

;; Debug function for completion issues
(defun my/debug-completion ()
  "Debug completion setup in current buffer."
  (interactive)
  (message "=== Completion Debug Info ===")
  (message "Major mode: %s" major-mode)
  (message "LSP connected: %s" (if (bound-and-true-p lsp-mode) "YES" "NO"))
  (message "Corfu mode: %s" (if (bound-and-true-p corfu-mode) "ON" "OFF"))
  (message "Corfu auto: %s" corfu-auto)
  (message "Corfu auto-delay: %s" corfu-auto-delay)
  (message "Corfu auto-prefix: %s" corfu-auto-prefix)
  (message "CAPF functions: %s" completion-at-point-functions)
  (when (bound-and-true-p lsp-mode)
    (message "LSP server: %s" (lsp-workspace-server-id (cl-first (lsp-workspaces))))
    (message "LSP completion provider: %s" lsp-completion-provider))
  (message "============================="))
#+end_src

** Python

*** Jupyter

#+begin_src emacs-lisp
;; Enhanced org-mode integration for Jupyter-like execution
(use-package ob-python
  :ensure nil ;; built into org
  :after org
  :config
  ;; Configure Python execution in org-mode
  (setq org-babel-python-command "python3")

  ;; Enable immediate execution and inline images
  (setq org-confirm-babel-evaluate nil) ;; Be careful with this
  (setq org-babel-python-command "python3")

  ;; Configure for better Python output
  (setq org-babel-python-mode 'python-mode))

(use-package jupyter
  :ensure (:host github :repo "emacs-jupyter/jupyter")
  :after org
  :config
  ;; Enable jupyter integration with org-babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   (append org-babel-load-languages
           '((jupyter . t))))

  ;; Optional: Set default header args for jupyter-python
  (setq org-babel-default-header-args:jupyter-python
        '((":async" . "yes")
          (":kernel" . "python3")
          (":session" . "py")))
  ;; Function to start jupyter without directory prompt
  (defun my/jupyter-start-in-notebooks ()
    "Start Jupyter server in ~/notebooks/ directory."
    (interactive)
    (let ((default-directory "~/notebooks/"))
      (jupyter-run-server-repl)))
  (with-eval-after-load 'ob-jupyter
    (defun jupyter-org-propertize-advice (orig-fn &rest args)
      (if (not (string= (buffer-name) (buffer-name (marker-buffer org-babel-current-src-block-marker))))
          (with-current-buffer (marker-buffer org-babel-current-src-block-marker)
            (apply orig-fn args))
        (apply orig-fn args)))
    (advice-add 'jupyter-org-src-block-propertize :around #'jupyter-org-propertize-advice)

    (defun jupyter-org-completion-advice (orig-fn &rest args)
      (let* ((info (org-babel-get-src-block-info))
             (lang (car info)))
        (if (and lang (string-match-p "jupyter" lang))
            (apply orig-fn args)
          nil)))
    (advice-add 'jupyter-org-completion-at-point :around #'jupyter-org-completion-advice)))

;; Org-mode configuration for Jupyter-like experience
(with-eval-after-load 'org
  ;; Enable languages for babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (shell . t)))

  ;; Better source block execution
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-edit-src-content-indentation 0)

  ;; Show images inline by default
  (setq org-startup-with-inline-images t)
  (setq org-image-actual-width '(600))

  ;; Jupyter-like keybindings for org-mode
  (define-key org-mode-map (kbd "C-c C-c") 'org-babel-execute-src-block)
  (define-key org-mode-map (kbd "C-c C-'")
              (lambda ()
                (interactive)
                (org-babel-execute-src-block)
                (org-babel-next-src-block)))
  (define-key org-mode-map (kbd "C-c C-r") 'org-babel-execute-buffer))



;; Function to toggle between org and ipynb modes mentally
(defun my/org-toggle-inline-images-and-execute ()
  "Execute source block and toggle inline images like Jupyter."
  (interactive)
  (org-babel-execute-src-block)
  (org-display-inline-images))

;; Bind the enhanced function
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c C-v C-v") 'my/org-toggle-inline-images-and-execute))

;; Optional: Function to convert between org and ipynb
;; Requires pandoc: apt install pandoc / brew install pandoc
(defun my/org-to-ipynb ()
  "Convert current org file to ipynb."
  (interactive)
  (let* ((org-file (buffer-file-name))
         (ipynb-file (concat (file-name-sans-extension org-file) ".ipynb")))
    (shell-command (format "pandoc %s -o %s" org-file ipynb-file))
    (message "Converted %s to %s" org-file ipynb-file)))

(defun my/ipynb-to-org ()
  "Convert current ipynb file to org."
  (interactive)
  (let* ((ipynb-file (buffer-file-name))
         (org-file (concat (file-name-sans-extension ipynb-file) ".org")))
    (shell-command (format "pandoc %s -o %s" ipynb-file org-file))
    (find-file org-file)
    (message "Converted %s to %s" ipynb-file org-file)))
#+end_src

*** Pyvenv
This package automaticaly handles and activate the virtual enviroment in a Python project.
#+begin_src emacs-lisp
(use-package pyvenv
  :ensure t
  :hook (python-ts-mode . pyvenv-track-virtualenv)
  :config
  ;; Set correct Python interpreter in shell and interactive shell
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))

;; Enhanced auto-activation for common project structures
(defun my/auto-activate-venv ()
  "Automatically activate virtual environment for Python projects."
  (when-let* ((project-root (or (project-root (project-current))
                                (locate-dominating-file default-directory ".git")
                                (locate-dominating-file default-directory "pyproject.toml")
                                (locate-dominating-file default-directory "uv.lock")
                                default-directory))
              (venv-path (cond
                          ;; Common venv directories
                          ((file-directory-p (concat project-root ".venv/"))
                           (concat project-root ".venv/"))
                          ((file-directory-p (concat project-root "venv/"))
                           (concat project-root "venv/"))
                          ((file-directory-p (concat project-root "env/"))
                           (concat project-root "env/"))
                          ;; Poetry support
                          ((and (executable-find "poetry")
                                (file-exists-p (concat project-root "pyproject.toml")))
                           (ignore-errors
                             (string-trim
                              (shell-command-to-string
                               (concat "cd " (shell-quote-argument project-root) " && poetry env info --path")))))
                          ;; Pipenv support
                          ((and (executable-find "pipenv")
                                (file-exists-p (concat project-root "Pipfile")))
                           (ignore-errors
                             (string-trim
                              (shell-command-to-string
                               (concat "cd " (shell-quote-argument project-root) " && pipenv --venv"))))))))
    (when (and venv-path (file-directory-p venv-path) (not (equal pyvenv-virtual-env venv-path)))
      (pyvenv-activate venv-path)
      (message "Activated virtual environment: %s" venv-path))))

;; Hook for additional auto-activation
(add-hook 'python-ts-mode-hook #'my/auto-activate-venv)
(add-hook 'python-mode-hook #'my/auto-activate-venv)
#+end_src

* LINE NUMBERS
This is to have line numbers
#+begin_src emacs-lisp
(use-package display-line-numbers
  :ensure nil
  :custom
  (display-line-numbers-width-start t)  ; to fix alignment in org-mode
  :hook
  (org-mode . display-line-numbers-mode)
  (prog-mode . display-line-numbers-mode))
#+end_src

* MARKDOWN MODE
Enables markdown mode.

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown")
  :bind (:map markdown-mode-map
         ("C-c C-e" . markdown-do)))
#+end_src

* MINIBUFFER ESCAPE
By default, Emacs requires you to hit ESC three times to escape quit the minibuffer.  

#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 30
        doom-modeline-icon t
        doom-modeline-support-imenu t
        doom-modeline-time t
        doom-modeline-time-icon t
        doom-modeline-time-live-icon t
        doom-modeline-major-mode-icon t
        doom-modeline-lsp-icon t
        doom-modeline-major-mode-color-icon t
        doom-modeline-bar-width 5
        doom-modeline-persp-name t
        doom-modeline-persp-icon t)
  
  ;; Enable display-time-mode for doom-modeline time to work
  (display-time-mode 1)
  
  ;; Optional time format settings
  (setq display-time-default-load-average nil
        display-time-24hr-format t))
#+end_src

* NEOTREE
Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  NeoTree provides following themes: classic, ascii, arrow, icons, and nerd.  Theme can be configed by setting "two" themes for neo-theme: one for the GUI and one for the terminal.  I like to use 'SPC t' for 'toggle' keybindings, so I have used 'SPC t n' for toggle-neotree.

| COMMAND        | DESCRIPTION                 | KEYBINDING |
|----------------+------------------  ---------+------------|
| neotree-toggle | /Toggle neotree/            | SPC t n    |
| neotree- dir   | /Open directory in neotree/ | SPC d n    |

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :config
  ;; Set projectile to use dired instead of neotree
  (setq projectile-switch-project-action 'projectile-dired)
  
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 50
        neo-window-fixed-size nil
        inhibit-compacting-font-caches t) 
        
  ;; truncate long file names in neotree
  (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil))))
  (setq neo-autorefresh t)
  
  ;; Simple function that works
  (defun my/neotree-enter-and-close ()
    "Open file at point and close neotree window."
    (interactive)
    (call-interactively 'neotree-enter)
    (run-with-timer 0.1 nil 'neotree-hide))
  
  ;; Try advising neotree-quick-look instead
  (advice-add 'neotree-quick-look :after
              (lambda (&rest args) 
                (run-with-timer 0.1 nil 'neotree-hide)))
  
  ;; Also try advising the change root function
  (advice-add 'neo-open-file :after
              (lambda (&rest args)
                (run-with-timer 0.1 nil 'neotree-hide)))
  
  ;; Override the default enter key in neotree
  (add-hook 'neotree-mode-hook
            (lambda ()
              (local-set-key (kbd "RET") 'my/neotree-enter-and-close)
              (local-set-key (kbd "SPC") 'my/neotree-enter-and-close)))
  
  ;; Auto-focus neotree when it opens
  (setq neo-force-change-root t)
  
  ;; Alternative fix: override after neotree loads
  (with-eval-after-load 'neotree
    (define-key neotree-mode-map (kbd "RET") 'my/neotree-enter-and-close)
    (define-key neotree-mode-map (kbd "SPC") 'my/neotree-enter-and-close)))

;; Manual focus command if needed
(defun my/focus-neotree ()
  "Focus neotree window if it exists."
  (interactive)
  (when (neo-global--window-exists-p)
    (select-window (get-buffer-window neo-buffer-name))))
#+end_src

* ORG MODE
All org mode configurations.

** Agenda
#+begin_src emacs-lisp
;; Basic agenda settings for clean daily view
(setq org-agenda-span 1
      org-agenda-start-day "+0d"
      org-agenda-skip-timestamp-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-agenda-skip-timestamp-if-deadline-is-shown t
      org-log-into-drawer t
      org-agenda-window-setup 'current-window
      org-agenda-restore-windows-after-quit t
      org-agenda-compact-blocks t
      org-agenda-block-separator ?─
      org-agenda-sticky t                    ; Keep agenda views around
      org-agenda-inhibit-startup t           ; Speed up agenda
      org-agenda-use-tag-inheritance nil)    ; Speed up agenda

;; Enhanced visual time grid
(setq org-agenda-time-grid 
      '((daily today require-timed)
        (0800 1000 1200 1400 1600 1800 2000)
        "......" "────────────────"))

;; Show current time with a nice indicator
(setq org-agenda-current-time-string 
      "⏰ now ─────────────────────────────────────────────────")

;; Align tags to the right in agenda view
(setq org-agenda-tags-column -140)  ; Negative number aligns to right, adjust value as needed

;; Remove grey background from agenda items
(setq org-agenda-block-separator ""
      hl-line-mode nil)

;; Enhanced agenda item formatting with icons and context
;; (setq org-agenda-prefix-format 
;;       '((agenda . " %i %-12:c%?-12t% s")
;;         (todo . " %i %-12:c %(org-todo-age) ")
;;         (tags . " %i %-12:c ")
;;         (search . " %i %-12:c ")))

(setq org-agenda-prefix-format 
      '((agenda . " %i %?-12t% s")
        (todo . " %i ")  ; Removed category, added space for task title
        (tags . " %i ")
        (search . " %i ")))

;; Hide tags in agenda view for cleaner look
(setq org-agenda-hide-tags-regexp nil)

;; Set up your agenda files (customize these paths)
(setq org-agenda-files '("~/Documentos/My vault/roam/20250925161446-tasks.org"))

;; Enhanced TODO Keywords System with habits
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "PROG(p)" "INTR(i)" "WAIT(w@/!)"
                  "|" "DONE(d!)" "CANCELLED(c@)")
        (sequence "HABIT(h)" "|" "DONE(d!)")
        (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")))

;; Modern color-coded TODO states
(setq org-todo-keyword-faces
      '(("TODO" . (:foreground "#ff6b6b" :weight bold))
        ("NEXT" . (:foreground "#4ecdc4" :weight bold))
        ("PROG" . (:foreground "#45b7d1" :weight bold))
        ("INTR" . (:foreground "#f9ca24" :weight bold))
        ("WAIT" . (:foreground "#dfe6e9" :weight bold))
        ("HABIT" . (:foreground "#a29bfe" :weight bold))
        ("DONE" . (:foreground "#6c5ce7" :weight bold))
        ("CANCELLED" . (:foreground "#a0a0a0" :weight bold))
        ("[ ]" . (:foreground "#ff6b6b" :weight bold))
        ("[-]" . (:foreground "#f9ca24" :weight bold))
        ("[?]" . (:foreground "#dfe6e9" :weight bold))
        ("[X]" . (:foreground "#6c5ce7" :weight bold))))

;; Habit tracking configuration
(with-eval-after-load 'org
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit))
(setq org-habit-graph-column 60
      org-habit-preceding-days 28
      org-habit-following-days 7
      org-habit-show-habits-only-for-today t
      org-habit-show-all-today nil
      org-habit-show-done-always-green t)

;; Time Tracking Configuration
(setq org-clock-persist 'history
      org-clock-into-drawer t
      org-clock-idle-time 15
      org-clock-out-remove-zero-time-clocks t
      org-clock-in-switch-to-state "PROG"
      org-clock-out-switch-to-state "NEXT"
      org-clock-report-include-clocking-task t
      org-clock-sound t)

;; Enable clock persistence across Emacs sessions
;; Safe clock persistence without crashing
(with-eval-after-load 'org-clock
  ;; Only persist clock data, not running timers
  (setq org-clock-persist 'history)  ; Only persist history, not clock
  (setq org-clock-persist-file "~/.emacs.d/org-clock-save.el")
  
  ;; Add safety check before loading
  (defun my/safe-clock-persistence ()
    "Safely load clock persistence."
    (when (and (file-exists-p org-clock-persist-file)
               (file-readable-p org-clock-persist-file))
      (condition-case err
          (org-clock-load)
        (error (message "Failed to load clock history: %s" err)
               ;; Delete corrupted file
               (delete-file org-clock-persist-file)))))
  
  ;; Save on exit
  (add-hook 'kill-emacs-hook 'org-clock-save)
  ;; Load on start (delayed to avoid conflicts)
  (run-with-idle-timer 2 nil 'my/safe-clock-persistence))

;; Effort estimation presets (for better time planning)
(setq org-global-properties 
      '(("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")))

;; Column view for project management
(setq org-columns-default-format 
      "%50ITEM(Task) %10PRIORITY %15TODO %15Effort(Estimated){:} %15CLOCKSUM")

;; Archive configuration for completed tasks
(setq org-archive-location "~/Documentos/My vault/roam/archive/%s_archive::datetree/")

;; Enhanced custom faces for modern appearance
(custom-set-faces
 '(org-agenda-date ((t (:height 1.1 :weight bold :foreground "#34495e"))))
 '(org-agenda-date-today ((t (:height 1.15 :weight bold :foreground "#e74c3c" :box t))))
 '(org-agenda-date-weekend ((t (:height 1.1 :weight bold :foreground "#7f8c8d"))))
 '(org-agenda-date-weekend-today ((t (:height 1.15 :weight bold :foreground "#e74c3c" :box t))))
 '(org-time-grid ((t (:foreground "#95a5a6"))))
 '(org-agenda-current-time ((t (:foreground "#e74c3c" :weight bold))))
 '(org-super-agenda-header ((t (:inherit custom-button :weight bold :height 1.05))))
 '(org-habit-ready-face ((t (:background "#2ecc71" :foreground "white"))))
 '(org-habit-alert-face ((t (:background "#f39c12" :foreground "white"))))
 '(org-habit-overdue-face ((t (:background "#e74c3c" :foreground "white"))))
 '(org-agenda-structure ((t (:height 1.2 :weight bold :foreground "#2c3e50")))))

(use-package org-super-agenda
  :ensure t
  :after org-agenda
  :init
  ;; Enhanced org-super-agenda groups that work well with tag-based icons
  (setq org-super-agenda-groups
        '((:name "🔄 Daily Habits "
                 :habit t
                 :order 1
                 :face 'org-habit-ready-face)
          
          (:name "🚀 In Progress "
                 :todo "PROG"
                 :order 2
                 :face 'warning)
          
          (:name "⚠️ Interrupted "
                 :todo "INTR"
                 :order 3
                 :face 'error)
          
          (:name "🔥 Overdue "
                 :scheduled past
                 :deadline past
                 :order 4
                 :face 'error)
          
          (:name "📅 Today "
                 :time-grid t
                 :date today
                 :scheduled today
                 :deadline today
                 :order 5
                 :face 'org-agenda-date-today)
          
          (:name "➡️ Next Actions "
                 :todo "NEXT"
                 :order 6)
          
          (:name "⭐ Important "
                 :priority "A"
                 :order 7)
          
          (:name "⏳ Waiting "
                 :todo "WAIT"
                 :order 8)
          
          (:name "💼 Work "
                 :tag "work"
                 :order 9)
          
          (:name "🏠 Personal "
                 :tag "personal"
                 :order 10)
          
          (:name "💪 Health "
                 :tag ("health" "fitness" "exercise")
                 :order 11)
          
          (:name "📚 Learning "
                 :tag ("learn" "study" "course")
                 :order 12)
          
          (:name "📆 This Week "
                 :deadline future
                 :scheduled future
                 :order 13)
          
          (:name "💭 Someday "
                 :todo "TODO"
                 :order 14)))
  :config
  (org-super-agenda-mode t))

;; Enhanced Capture Templates with Time Tracking and Habits
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Tasks")
         "* TODO %?\n  SCHEDULED: %t\n" :clock-in t :clock-resume t)
        
        ("n" "Next Action" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Tasks")
         "* NEXT %?\n  SCHEDULED: %^t\n")
        
        ("p" "Priority Todo" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Tasks")
         "* TODO [#A] %?\n  DEADLINE: %^t\n")
        
        ;; FIXED: Daily habit (every day)
        ("h" "Daily Habit" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Habits")
         "* HABIT %?\n  SCHEDULED: <%<%Y-%m-%d %a .+1d>>\n  :PROPERTIES:\n  :STYLE: habit\n  :REPEAT_TO_STATE: HABIT\n  :END:\n")
        
        ;; FIXED: Weekday habit (Monday to Friday only)
        ("H" "Weekday Habit" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Habits")
         "* HABIT %?\n  SCHEDULED: %(my/format-next-monday)\n  :PROPERTIES:\n  :STYLE: habit\n  :REPEAT_TO_STATE: HABIT\n  :END:\n")
        
        ;; Alternative weekday habit using different approach
        ("W" "Weekday Habit Alt" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Habits")
         "* HABIT %? :weekdays:\n  SCHEDULED: <%<%Y-%m-%d %a .+1w>>\n  :PROPERTIES:\n  :STYLE: habit\n  :REPEAT_TO_STATE: HABIT\n  :END:\n")
        
        ;; Specific weekday habits
        ("1" "Monday Habit" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Habits")
         "* HABIT %?\n  SCHEDULED: <%<%Y-%m-%d Mon .+1w>>\n  :PROPERTIES:\n  :STYLE: habit\n  :REPEAT_TO_STATE: HABIT\n  :END:\n")
        
        ("2" "Tuesday Habit" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Habits")
         "* HABIT %?\n  SCHEDULED: <%<%Y-%m-%d Tue .+1w>>\n  :PROPERTIES:\n  :STYLE: habit\n  :REPEAT_TO_STATE: HABIT\n  :END:\n")
        
        ("3" "Wednesday Habit" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Habits")
         "* HABIT %?\n  SCHEDULED: <%<%Y-%m-%d Wed .+1w>>\n  :PROPERTIES:\n  :STYLE: habit\n  :REPEAT_TO_STATE: HABIT\n  :END:\n")
        
        ("4" "Thursday Habit" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Habits")
         "* HABIT %?\n  SCHEDULED: <%<%Y-%m-%d Thu .+1w>>\n  :PROPERTIES:\n  :STYLE: habit\n  :REPEAT_TO_STATE: HABIT\n  :END:\n")
        
        ("5" "Friday Habit" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Habits")
         "* HABIT %?\n  SCHEDULED: <%<%Y-%m-%d Fri .+1w>>\n  :PROPERTIES:\n  :STYLE: habit\n  :REPEAT_TO_STATE: HABIT\n  :END:\n")
        
        ;; Weekend habits
        ("6" "Saturday Habit" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Habits")
         "* HABIT %?\n  SCHEDULED: <%<%Y-%m-%d Sat .+1w>>\n  :PROPERTIES:\n  :STYLE: habit\n  :REPEAT_TO_STATE: HABIT\n  :END:\n")
        
        ("7" "Sunday Habit" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Habits")
         "* HABIT %?\n  SCHEDULED: <%<%Y-%m-%d Sun .+1w>>\n  :PROPERTIES:\n  :STYLE: habit\n  :REPEAT_TO_STATE: HABIT\n  :END:\n")
        
        
        ("i" "Interruption" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Interruptions")         "* INTR %?\n  %U\n" :clock-in t :clock-resume t)
        
        ("m" "Meeting" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Meetings")
         "* TODO %? :meeting:\n  SCHEDULED: %^t\n")
        
        ("w" "Work Task" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Work")
         "* NEXT %? :work:\n  SCHEDULED: %^t\n")
        
        ("r" "Personal Task" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Personal")
         "* NEXT %? :personal:\n  SCHEDULED: %^t\n")
        
        ("e" "Exercise" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Health")
         "* HABIT %? :health:exercise:\n  SCHEDULED: %<<%Y-%m-%d %a .+1d>>\n  :PROPERTIES:\n  :STYLE: habit\n  :REPEAT_TO_STATE: HABIT\n  :END:\n")
        
        ("l" "Learning" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Learning")
         "* NEXT %? :learn:\n  SCHEDULED: %^t\n")
        
        ("N" "Note" entry (file+headline "~/Documentos/My vault/roam/20250901204409-inbox.org" "Note's Inbox")
         "* %?\n  %T\n")
        
        ("b" "Bookmark" entry (file+headline "~/Documentos/My vault/roam/20250901204409-inbox.org" "Bookmarks")
         "* %?\n  %^L\n  %T\n")
        ("B" "Birthday" entry (file+headline "~/Documentos/My vault/roam/20250925161446-tasks.org" "Birthdays")
         "* TODO %^{Person's name} Birthday\n  SCHEDULED: <%^{Birthday date (YYYY-MM-DD)} +1y>\n  • %^{Birth year}\n  Remember to call/text them!")))

;; Custom Agenda Commands for Enhanced Workflow
(setq org-agenda-custom-commands
      '(("d" "Daily Workflow"
         ((agenda "" ((org-agenda-span 1)
                      (org-agenda-overriding-header "📋 Today's Focus")
                      (org-super-agenda-groups
                       '((:name "🔄 Daily Habits" :habit t :order 1)
                         (:name "🚀 In Progress" :todo "PROG" :order 2)
                         (:name "⚠️ Interrupted" :todo "INTR" :order 3) 
                         (:name "📅 Today's Schedule" 
                                :time-grid t
                                :scheduled today
                                :deadline today
                                :order 4)
                         (:name "➡️ Next Actions" :todo "NEXT" :order 5)
                         (:name "⭐ Important" :priority "A" :order 6)
                         (:discard (:anything t))))))))
        
        ("w" "Weekly Review"
         ((agenda "" ((org-agenda-span 7)
                      (org-agenda-overriding-header "📊 This Week Overview")
                      (org-super-agenda-groups
                       '((:name "🔄 Habits" :habit t :order 1)
                         (:name "🚀 In Progress" :todo "PROG" :order 2)
                         (:name "⚠️ Interrupted" :todo "INTR" :order 3)
                         (:name "⏳ Waiting" :todo "WAIT" :order 4)
                         (:name "⭐ High Priority" :priority "A" :order 5)
                         (:name "➡️ Next Actions" :todo "NEXT" :order 6)
                         (:name "📝 Unprocessed" :todo "TODO" :order 7)
                         (:discard (:anything t))))))))
        
        ("m" "Monthly View"
         ((agenda "" ((org-agenda-span 30)
                      (org-agenda-overriding-header "📅 Monthly Overview")
                      (org-super-agenda-groups
                       '((:name "🔄 Habits" :habit t :order 1)
                         (:name "🚀 In Progress" :todo "PROG" :order 2)
                         (:name "⚠️ Interrupted" :todo "INTR" :order 3)
                         (:name "⭐ High Priority" :priority "A" :order 4)
                         (:name "➡️ Next Actions" :todo "NEXT" :order 5)
                         (:name "⏳ Waiting" :todo "WAIT" :order 6)
                         (:discard (:anything t))))))))
        
        ("H" "Habits Dashboard"
         ((agenda "" ((org-agenda-span 14)
                      (org-agenda-overriding-header "🔄 Habits Overview (2 weeks)")
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp ":STYLE:.*habit"))
                      (org-habit-show-all-today t)))))
        
        ("c" "Clock Review"
         ((agenda "" ((org-agenda-span 7)
                      (org-agenda-overriding-header "⏰ Weekly Time Review")
                      (org-agenda-start-with-clockreport-mode t)
                      (org-agenda-clockreport-parameter-plist
                       '(:link t :maxlevel 4 :fileskip0 t :compact t :narrow 60))
                      (org-super-agenda-groups nil)))))
        
        ("f" "Focus Mode"
         ((agenda "" ((org-agenda-span 1)
                      (org-agenda-overriding-header "🎯 Focus Mode")
                      (org-super-agenda-groups
                       '((:name "🚀 Currently Working On" :todo "PROG" :order 1)
                         (:name "🔄 Habits" :habit t :order 2)
                         (:name "⚠️ Urgent" :deadline today :order 3)
                         (:name "📅 Scheduled" :scheduled today :order 4)
                         (:name "➡️ Next" :todo "NEXT" :order 5)
                         (:discard (:anything t))))))))
        
        ("i" "Inbox Processing"
         ((alltodo "" ((org-agenda-overriding-header "📥 Inbox Items")
                       (org-agenda-files '("~/Documentos/My vault/roam/20250901204409-inbox.org"))))))
        
        ("p" "Planning View"
         ((agenda "" ((org-agenda-span 3)
                      (org-agenda-overriding-header "📅 3 Day Forecast")
                      (org-super-agenda-groups
                       '((:name "⭐ High Priority" :priority "A" :order 1)
                         (:name "➡️ Next Actions" :todo "NEXT" :order 2)
                         (:name "⏳ Waiting" :todo "WAIT" :order 3)
                         (:name "📅 Scheduled" :scheduled future :order 4)
                         (:discard (:anything t))))))))
        
        ("s" "Stuck Projects"
         ((tags-todo "PROJECT"
                     ((org-agenda-overriding-header "🚧 Stuck Projects")
                      (org-agenda-skip-function 'my/org-agenda-skip-non-stuck-projects)))))))

;; ============================================================================
;; ENHANCED WORKFLOW FUNCTIONS
;; ============================================================================

(defun my/quick-tag-task ()
  "Quickly add common tags to current task."
  (interactive)
  (let ((tag (completing-read "Add tag: " 
                              '("work" "personal" "health" "learn" "meeting" 
                                "project" "urgent" "important" "coding" "finance"))))
    (org-set-tags-command)
    (insert tag)))

(defun my/format-next-monday ()
  "Format the next Monday date for org capture with proper repeat."
  (let* ((today (decode-time))
         (today-dow (decoded-time-weekday today))
         (days-to-add (if (= today-dow 7) 1 ; If Sunday, Monday is tomorrow
                        (if (= today-dow 1) 0 ; If Monday, use today
                          (- 8 today-dow))))  ; Otherwise calculate days to next Monday
         (target-date (time-add (current-time) (days-to-time days-to-add))))
    (format "<%s .+1w>" (format-time-string "%Y-%m-%d %a" target-date))))

(defun my/create-weekday-habit (title)
  "Create a habit that only appears on weekdays."
  (interactive "sHabit title: ")
  (let ((next-monday (my/next-weekday 1))) ; 1 = Monday
    (org-capture-string
     (format "* HABIT %s :weekdays:
  SCHEDULED: <%s .+1w>
  :PROPERTIES:
  :STYLE: habit
  :REPEAT_TO_STATE: HABIT
  :END:
"
             title
             (format-time-string "%Y-%m-%d Mon" next-monday))
     "h")))

(defun my/next-weekday (day)
  "Get the next occurrence of DAY (1=Mon, 2=Tue, ..., 7=Sun)."
  (let* ((today (decode-time))
         (today-day (decoded-time-weekday today))
         (days-ahead (if (<= day today-day)
                         (+ 7 (- day today-day))
                       (- day today-day))))
    (time-add (current-time) (days-to-time days-ahead))))

;; Enhanced habit tracking for weekdays only
(defun my/org-habit-weekday-only-p ()
  "Check if current habit is weekday-only."
  (org-entry-get (point) "WEEKDAY_ONLY"))

;; Custom agenda skip function for weekday habits
(defun my/org-agenda-skip-weekend-habits ()
  "Skip habits on weekends if they're marked as weekday-only."
  (when (and (org-is-habit-p)
             (my/org-habit-weekday-only-p)
             (member (format-time-string "%a") '("Sat" "Sun")))
    (outline-next-heading)))

(defun org-agenda-toggle-completed ()
  "Toggle visibility of completed items in agenda view."
  (interactive)
  (setq org-agenda-skip-timestamp-if-done (not org-agenda-skip-timestamp-if-done)
        org-agenda-skip-deadline-if-done (not org-agenda-skip-deadline-if-done)
        org-agenda-skip-scheduled-if-done (not org-agenda-skip-scheduled-if-done))
  (org-agenda-redo))

(defun my/org-clock-in-and-track ()
  "Clock in and automatically track the task."
  (interactive)
  (org-clock-in)
  (org-todo "PROG"))

(defun my/org-clock-in-last-task ()
  "Clock in the last clocked task."
  (interactive)
  (org-clock-in-last))

(defun my/org-agenda-process-inbox-item ()
  "Process a single inbox item: categorize, prioritize, and schedule."
  (interactive)
  (org-agenda-todo "NEXT")
  (org-agenda-priority)
  (org-agenda-schedule nil))

(defun my/org-agenda-process-all-inbox ()
  "Process all inbox items interactively."
  (interactive)
  (org-agenda nil "i")
  (org-agenda-bulk-mark-all)
  (message "All inbox items marked. Press 'x' for bulk actions."))

(defun org-todo-age ()
  "Return age of TODO item in days."
  (let ((created (org-entry-get (point) "CREATED")))
    (if created
        (format "(%dd)" 
                (- (time-to-days (current-time))
                   (time-to-days (org-time-string-to-time created))))
      "")))

(defun my/org-agenda-time-context ()
  "Show different agenda views based on time of day."
  (interactive)
  (let ((hour (decoded-time-hour (decode-time))))
    (cond
     ((< hour 10) (org-agenda nil "d"))  ; Morning: daily view
     ((< hour 17) (org-agenda nil "w"))  ; Work: weekly view  
     (t (org-agenda nil "c")))))         ; Evening: clock review

;; Auto-refile completed and cancelled tasks (but not habits)
(defun my/org-auto-refile-done-tasks ()
  "Automatically refile DONE tasks to Completed and CANCELLED to Canceled.
   Does not refile habits."
  (when (and (member org-state '("DONE" "CANCELLED"))
             (not (org-is-habit-p)))  ; Don't refile habits
    (let ((org-refile-targets '((nil :maxlevel . 1)))
          (heading (if (string= org-state "DONE") "Completed" "Canceled")))
      (save-excursion
        (org-back-to-heading t)
        (org-refile nil nil (list heading 
                                  (buffer-file-name)
                                  nil
                                  (save-excursion
                                    (goto-char (point-min))
                                    (re-search-forward (concat "^\\* " heading))
                                    (point))))))))

(add-hook 'org-after-todo-state-change-hook 'my/org-auto-refile-done-tasks)

(defun my/org-habit-streak ()
  "Show current streak for habit at point."
  (interactive)
  (if (org-is-habit-p)
      (let* ((habit (org-habit-parse-todo))
             (done-dates (reverse (nth 4 habit)))
             (today (time-to-days (current-time)))
             (streak 0)
             (last-date today))
        (dolist (date done-dates)
          (let ((date-days (time-to-days date)))
            (if (= (1+ date-days) last-date)
                (setq streak (1+ streak)
                      last-date date-days)
              (setq last-date -1))))
        (message "Current streak: %d days" streak))
    (message "Not on a habit")))

(defun my/org-agenda-skip-non-stuck-projects ()
  "Skip trees that are not stuck projects."
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (and (member "PROJECT" (org-get-tags))
             (not (save-excursion
                    (re-search-forward "^\\*+ \\(NEXT\\|PROG\\)" next-headline t))))
        nil
      next-headline)))

(defun my/org-agenda-bulk-mark-regexp ()
  "Bulk mark items matching a regexp."
  (interactive)
  (let ((regexp (read-string "Regexp: ")))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward regexp nil t)
        (org-agenda-bulk-mark)))))

;; Enhanced agenda buffer optimization
(add-hook 'org-agenda-mode-hook
          (lambda ()
            (display-line-numbers-mode -1)
            (visual-line-mode 1)
            (setq org-habit-show-habits t)
            ;; Evil-mode specific settings
            (when (bound-and-true-p evil-mode)
              (evil-set-initial-state 'org-agenda-mode 'motion))))

;; Show current clocking task in frame title
(setq frame-title-format
      '((:eval (if (and (fboundp 'org-clocking-p) (org-clocking-p))
                   (concat "⏰ [" (org-clock-get-clock-string) "] ")
                 ""))
        "%b - Emacs"))

;; Habit completion rewards
(defun my/org-habit-celebrate ()
  "Celebrate completing a habit."
  (when (and (org-is-habit-p)
             (string= (org-get-todo-state) "DONE"))
    (message "🎉 Great job! Habit completed! Keep the streak going! 🎉")))

(add-hook 'org-after-todo-state-change-hook 'my/org-habit-celebrate)

;; Speed commands for quick agenda actions
(setq org-agenda-use-speed-commands t)
(setq org-speed-commands-user
      '(("x" . org-agenda-bulk-mark)
        ("X" . org-agenda-bulk-unmark-all)))

;; Enable column view in agenda
;; (add-hook 'org-agenda-finalize-hook 'org-agenda-columns)
#+end_src

** Enabling Table of Contents
Enable table of contents in emacs.
#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Diminish Org Indent Mode
Removes "Ind" from showing in the modeline.
#+begin_src emacs-lisp
(eval-after-load 'org-indent '(diminish 'org-indent-mode))
#+end_src

** Download and Screenshot
#+begin_src emacs-lisp
;; ============================================================================
;; ORG-DOWNLOAD CONFIGURATION (Drag & Drop + Clipboard)
;; ============================================================================

(use-package org-download
  :ensure t
  :after org
  :config
  ;; Set default download method based on system
  (if (eq system-type 'darwin)
      (setq org-download-screenshot-method "screencapture -i %s"))
  (if (eq system-type 'gnu/linux)
      (setq org-download-screenshot-method "maim -s %s"))
  (if (eq system-type 'windows-nt)
      (setq org-download-screenshot-method "snippingtool /clip"))
  
  ;; Configure org-download settings
  (setq org-download-image-dir "./images"  ; Save images in ./images/ relative to org file
        org-download-heading-lvl nil       ; Don't use heading for folder name
        org-download-delete-image-after-download nil
        org-download-method 'directory     ; Use directory method
        org-download-image-org-width 600   ; Default display width
        org-download-image-latex-width 10  ; LaTeX width in cm
        org-download-timestamp "%Y%m%d-%H%M%S_"  ; Timestamp format
        org-download-abbreviate-filename-function 'expand-file-name)
  
  ;; Enable drag-and-drop
  (org-download-enable)
  
  ;; Automatically display images after inserting
  (setq org-download-display-inline-images t)
  
  ;; Custom function to set image width
  (defun my/org-download-set-image-width (width)
    "Set the width for the next downloaded image."
    (interactive "nImage width (pixels): ")
    (setq org-download-image-org-width width)
    (message "Next image width set to %d pixels" width)))

;; ============================================================================
;; ORG-ATTACH-SCREENSHOT CONFIGURATION
;; ============================================================================

(use-package org-attach-screenshot
  :ensure t
  :after org
  :config
  (setq org-attach-screenshot-dirfunction
        (lambda () 
          (concat (file-name-directory (buffer-file-name)) "images/"))
        org-attach-screenshot-relative-links t
        org-attach-screenshot-auto-refresh 'always
        org-attach-screenshot-insert-function 'org-attach-screenshot-insert-link))

;; ============================================================================
;; ENHANCED ORG-ATTACH CONFIGURATION
;; ============================================================================

(with-eval-after-load 'org-attach
  ;; Set default attach directory
  (setq org-attach-id-dir "attachments/"
        org-attach-auto-tag nil  ; Don't auto-tag attachments
        org-attach-method 'cp     ; Copy files instead of move/link
        org-attach-store-link-p 'attached)  ; Store link after attaching
  
  ;; Custom function to attach from clipboard
  (defun my/org-attach-clipboard ()
    "Attach image from clipboard."
    (interactive)
    (let ((file (concat (format-time-string "%Y%m%d-%H%M%S") ".png")))
      (cond
       ((eq system-type 'darwin)
        (shell-command (format "osascript -e 'set the clipboard to (read (POSIX file \"%s\") as TIFF picture)' && pbpaste > %s"
                               file file)))
       ((eq system-type 'gnu/linux)
        (shell-command (format "xclip -selection clipboard -t image/png -o > %s" file)))
       ((eq system-type 'windows-nt)
        (shell-command (format "powershell -command \"Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.Clipboard]::GetImage().Save('%s', [System.Drawing.Imaging.ImageFormat]::Png)\"" file))))
      (when (file-exists-p file)
        (org-attach-attach file nil 'cp)
        (delete-file file)
        (message "Image attached from clipboard")))))

;; ============================================================================
;; HELPER FUNCTIONS
;; ============================================================================

(defun my/org-insert-clipboard-image ()
  "Insert an image from the clipboard and save it to the images folder."
  (interactive)
  (org-download-clipboard))

(defun my/org-insert-screenshot ()
  "Take a screenshot and insert it into the document."
  (interactive)
  (org-download-screenshot))

(defun my/org-toggle-inline-images ()
  "Toggle the display of inline images in org-mode."
  (interactive)
  (if org-inline-image-overlays
      (org-remove-inline-images)
    (org-display-inline-images)))

(defun my/org-refresh-inline-images ()
  "Refresh all inline images in the buffer."
  (interactive)
  (org-remove-inline-images)
  (org-display-inline-images))

(defun my/org-insert-image-link ()
  "Insert a link to an image file."
  (interactive)
  (let ((file (read-file-name "Select image: " nil nil t nil
                              (lambda (name)
                                (or (directory-name-p name)
                                    (member (file-name-extension name) '("png" "jpg" "jpeg" "gif" "svg" "bmp")))))))
    (insert (format "[[file:%s]]" (file-relative-name file)))))

(defun my/org-resize-image-at-point ()
  "Resize the image at point by changing its width attribute."
  (interactive)
  (let ((width (read-number "Image width (pixels): " 600)))
    (when (looking-at "\\[\\[file:\\(.*?\\)\\]")
      (goto-char (match-end 0))
      (insert (format "\n#+ATTR_ORG: :width %d" width))
      (org-display-inline-images))))

(defun my/org-attach-file-and-insert-link ()
  "Attach a file to the current heading and insert a link to it."
  (interactive)
  (call-interactively 'org-attach-attach)
  (org-attach-reveal)
  (let ((attach-dir (org-attach-dir)))
    (when attach-dir
      (let ((files (directory-files attach-dir nil "^[^.]")))
        (when files
          (let ((file (completing-read "Insert link to: " files)))
            (insert (format "[[attachment:%s]]" file))))))))

;; ============================================================================
;; DISPLAY SETTINGS
;; ============================================================================

;; Enable inline image display by default
(setq org-startup-with-inline-images t)

;; Set default image width
(setq org-image-actual-width '(600))

;; Enable image drag-and-drop in dired
(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "C-c C-x") 
    (lambda ()
      (interactive)
      (let ((files (dired-get-marked-files)))
        (switch-to-buffer-other-window (current-buffer))
        (dolist (file files)
          (when (member (file-name-extension file) '("png" "jpg" "jpeg" "gif" "svg"))
            (insert (format "[[file:%s]]\n" file))
            (org-display-inline-images)))))))

;; ============================================================================
;; DRAG AND DROP CONFIGURATION
;; ============================================================================

;; Enable drag-and-drop for all image types
(with-eval-after-load 'org
  (add-hook 'org-mode-hook
            (lambda ()
              ;; Enable org-download drag-and-drop
              (org-download-enable)
              ;; Set up drag-and-drop handlers
              (setq dnd-protocol-alist
                    '(("^file:///" . org-download-dnd)
                      ("^https?://" . org-download-dnd-base64))))))

;; ============================================================================
;; AUTO-DISPLAY CONFIGURATION
;; ============================================================================

;; Automatically display images after certain operations
(advice-add 'org-download-yank :after #'org-display-inline-images)
(advice-add 'org-download-screenshot :after #'org-display-inline-images)

;; Hook to display images when opening org files
(add-hook 'org-mode-hook 'org-display-inline-images)
#+end_src

** Inline Images
Automatically toggle inline images in emacs.
#+begin_src emacs-lisp
(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
#+end_src
** Nov Mode
This package is to read EPUB files.
#+begin_src emacs-lisp
(use-package nov
  :ensure t
  :mode ("\\.epub\\'" . nov-mode)
  :config
  ;; Basic nov settings
  (setq nov-text-width 140)
  ;; Enable variable-pitch-mode for better reading experience
  (add-hook 'nov-mode-hook 'visual-line-mode)
  (add-hook 'nov-mode-hook 'variable-pitch-mode)
  (add-hook 'nov-mode-hook 'olivetti-mode)
  (add-hook 'nov-mode-hook (lambda ()
                             (setq-local line-spacing 0.2)))
  ;; Optional: Improve font rendering
  (defun my/nov-font-setup ()
    (face-remap-add-relative 'variable-pitch :family "CaskaydiaMono Nerd Font" :height 1.2))
  (add-hook 'nov-mode-hook 'my/nov-font-setup))
#+end_src

** Org Modern Mode
This improves orgmode ui and make it more modern.
#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :custom
  (org-modern-hide-stars nil)		; adds extra indentation
  (org-modern-table nil)
  (org-modern-list 
   '(;; (?- . "-")
     (?* . "•")
     (?+ . "‣")))
  :hook
  (org-mode . org-modern-mode))
(use-package org-modern-indent
  :ensure (:host github :repo "jdtsmith/org-modern-indent")
  :config ; add late to hook
  (setq org-startup-indented t)
  (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src

** Org Level Headers
This changes the size of org headers.
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
 '(org-level-6 ((t (:inherit outline-6 :height 1.2))))
 '(org-level-7 ((t (:inherit outline-7 :height 1.1)))))
#+end_src

** Org Roam
Org Roam improves note taking and connections.
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-directory "~/Documentos/My vault/roam")
  :config
  (org-roam-setup)
  ;; Example keybinding
  (define-key global-map (kbd "C-c n f") #'org-roam-node-find)
  )

(use-package org-roam-ui
  :ensure t
  :after org-roam
  :config
  ;; Sync with your Emacs theme
  (setq org-roam-ui-sync-theme t)
  
  ;; Follow your current note in the graph
  (setq org-roam-ui-follow t)
  
  ;; Update graph when you save
  (setq org-roam-ui-update-on-save t)
  
  ;; Browser port (default is 35901)
  (setq org-roam-ui-port 35901)
  
  ;; Custom styling (edit in browser dev tools or config)
  (setq org-roam-ui-custom-theme
        '((bg . "#1e1e1e")
          (bg-alt . "#282828")
          (fg . "#d4d4d4")
          (fg-alt . "#a0a0a0")
          (red . "#ff6b6b")
          (orange . "#f39c12")
          (yellow . "#f9ca24")
          (green . "#2ecc71")
          (cyan . "#4ecdc4")
          (blue . "#45b7d1")
          (violet . "#a29bfe")
          (magenta . "#fd79a8"))))

(setq org-roam-extract-new-file-path "%<%Y%m%d%H%M%S>-${slug}.org")
#+end_src

** Org SQL
#+begin_src emacs-lisp
(use-package sql
  :ensure nil
  :config
  ;; Ensure auth-source looks in .authinfo.gpg
  (setq auth-sources '("~/.emacs.d/.authinfo.gpg"))
  
  ;; Use modern `sqlcmd` client instead of legacy `osql`
  (setq sql-ms-program "sqlcmd")
  ;; Force TLS connection (Azure requires encryption)
  (setq sql-ms-options '("-N" "-C"))
  ;; Define named connection
  (setq sql-connection-alist
      '((charlie-mssql-connection
         (sql-product 'ms)
         (sql-server "********")
         (sql-database "*****")
         (sql-user "*****")
         (sql-password "*****")))))
#+end_src

** Olivetti Mode
#+begin_src emacs-lisp
;; Install olivetti with Elpaca
(use-package olivetti
  :ensure t
  :config
  (setq olivetti-style 'fancy
        olivetti-margin-width 140)
  (setq-default olivetti-body-width 140))
;; Enable in org-agenda buffers
(add-hook 'org-agenda-mode-hook #'olivetti-mode)
#+end_src
** org-babel-do-load-languages
Languages enabled in org src blocks.
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (shell . t)
      (python . t)
      (sql . t)
      (css . t))))
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |
#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

** visual-fill-column
Package to center text.
#+begin_src emacs-lisp
(use-package visual-fill-column
  :ensure t)
#+end_src

* PDFs
[[https://github.com/vedang/pdf-tools][pdf-tools]] is a replacement of DocView for viewing PDF files inside Emacs.  It uses the =poppler= library, which also means that 'pdf-tools' can by used to modify PDFs.  I use to disable 'display-line-numbers-mode' in 'pdf-view-mode' because line numbers crash it.

#+begin_src emacs-lisp
(use-package pdf-tools
  :defer t
  :commands (pdf-loader-install)
  :mode "\\.pdf\\'"
  :bind (:map pdf-view-mode-map
              ("j" . pdf-view-next-line-or-next-page)
              ("k" . pdf-view-previous-line-or-previous-page)
              ("C-=" . pdf-view-enlarge)
              ("C--" . pdf-view-shrink))
  :init (pdf-loader-install)
  :config (add-to-list 'revert-without-query ".pdf"))

(add-hook 'pdf-view-mode-hook #'(lambda () (interactive) (display-line-numbers-mode -1)
                                                         (blink-cursor-mode -1)
                                                         (doom-modeline-mode -1)))
#+end_src

* PERSPECTIVE
[[https://github.com/nex3/perspective-el][Perspective]] provides multiple named workspaces (or "perspectives") in Emacs, similar to multiple desktops in window managers.  Each perspective has its own buffer list and its own window layout, along with some other isolated niceties, like the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]] ring.

#+begin_src emacs-lisp
(use-package perspective
  :custom
  ;; NOTE! I have also set 'SCP /' to open the perspective menu.
  ;; I'm only setting the additional binding because setting it
  ;; helps suppress an annoying warning message.
  (persp-mode-prefix-key (kbd "C-c M-p"))
  :init 
  (persp-mode)
  :hook
  (dashboard-after-initialize . persp-mode)
  :config
  ;; Sets a file to write to when we save states
  (setq persp-state-default-file "~/.emacs.d/sessions")
  
  (setq persp-switch-to-added-buffer nil) ; Don't auto-switch when adding buffers

  (setq persp-projectile-perspective-name-function 
        (lambda (project-root) 
          (file-name-nondirectory (directory-file-name project-root))))
  
  (defun my/projectile-switch-with-perspective ()
    "Switch to project and create/switch to its perspective."
    (let* ((project-root (projectile-project-root))
           (project-name (file-name-nondirectory (directory-file-name project-root))))
      ;; Create or switch to perspective for this project
      (persp-switch project-name)
    ;; Then do your normal project action (dired or neotree)
    (projectile-dired))) ; or whatever action you prefer

  (setq projectile-switch-project-action 'my/projectile-switch-with-perspective)

  
  ;; `consult' fix:
  (with-eval-after-load 'consult
    (consult-customize consult--source-buffer :hidden t :default nil)
    (add-to-list 'consult-buffer-sources persp-consult-source))) 

;; This will group buffers by persp-name in ibuffer.
(add-hook 'ibuffer-hook
          (lambda ()
            (persp-ibuffer-set-filter-groups)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
              (ibuffer-do-sort-by-alphabetic))))

;; Automatically save perspective states to file when Emacs exits.
(add-hook 'kill-emacs-hook #'persp-state-save)

#+end_src

* PROJECTILE
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.  It should be noted that many projectile commands do not work if you have set "fish" as the "shell-file-name" for Emacs. 
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-global-mode 1))
#+end_src

* RAINBOW DELIMITERS
Adding rainbow coloring to parentheses.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))
#+end_src

* RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src

* SANE DEFAULTS
The following settings are simple modes that are enabled (or disabled) so that Emacs functions more like you would expect a proper editor/IDE to function.

#+begin_src emacs-lisp
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode 1)    ;; Turn on the indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
;; (global-display-line-numbers-mode 1) ;; Display line numbers
(global-visual-line-mode t)  ;; Enable truncated lines
(menu-bar-mode -1)           ;; Disable the menu bar 
(scroll-bar-mode -1)         ;; Disable the scroll bar
(tool-bar-mode -1)           ;; Disable the tool bar
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
      mouse-wheel-progressive-speed nil
      mouse-wheel-follow-mouse 't
      scroll-step 1)
(setopt
 ;; no need for a message in scratch buffer
 initial-scratch-message nil
 ;; .#locked-file-name
 create-lockfiles nil
 ;; exit emacs without asking to kill processes
 confirm-kill-processes nil
 ;; don't break linked files
 backup-by-copying t
 ;; always end files with a newline
 require-final-newline t
 ;; don't ask to delete old backup files
 delete-old-versions t
 ;; `revert-buffer' without confirmation
 revert-without-query '(".*")
 ;; non-unique buffer name display: unique-part/non-unique-filename
 uniquify-buffer-name-style 'forward
 ;; supposed to make scrolling faster on hold
 fast-but-imprecise-scrolling t
 ;; correctly resize windows by pixels (e.g. in `split-window' functions)
 window-resize-pixelwise t
 ;; disable annoying "ad-handle-definition: 'something' got redefined" warnings
 ad-redefinition-action 'accept
 ;; use `y-or-n-p' instead of `yes-or-no-p'
 use-short-answers t
 ;; perform autoload if docs are missing from autoload objects.
 help-enable-symbol-autoload t
 ;; don't ask on `xref' jump: "Symbolic link ... follow link? (y or n)"
 vc-follow-symlinks t)
;; make sure to focus when a new emacsclient frame created
(add-hook 'server-after-make-frame-hook (lambda () (select-frame-set-input-focus (selected-frame))))
#+end_src

* SESSION MANAGEMENT
This configures general session management and enable manually saving and loading sessions.

#+begin_src emacs-lisp
(use-package easysession
  :ensure t
  :config
  (setq easysession-save-dir "~/.emacs.d/easysession/")
  (setq easysession-mode-line-misc-info t)
  (add-to-list 'savehist-additional-variables 'easysession--current-session-name))

;; Save cursor position
(use-package saveplace
  :ensure nil
  :config
  (save-place-mode 1))

(use-package savehist
  :ensure nil
  :hook
  (after-init . savehist-mode)
  :config
  (add-to-list 'savehist-additional-variables 'kill-ring)
  (add-to-list 'savehist-additional-variables 'mark-ring)
  (add-to-list 'savehist-additional-variables 'search-ring)
  (add-to-list 'savehist-additional-variables 'regexp-search-ring))
#+end_src

* SHELLS AND TERMINALS
In my configs, all of my shells (bash, fish, zsh and the ESHELL) require my shell-color-scripts-git package to be installed.  On Arch Linux, you can install it from the AUR.  Otherwise, go to my shell-color-scripts repository on GitLab to get it.

** Eshell
Eshell is an Emacs 'shell' that is written in Elisp.
#+begin_src emacs-lisp
(use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))

(defun my/eshell-starship-prompt ()
  "Starship-inspired eshell prompt."
  (concat
   ;; Directory with blue color
   (propertize (file-name-nondirectory (abbreviate-file-name (eshell/pwd)))
               'face '(:foreground "#87CEEB" :weight bold))
   ;; Git info in green if clean, red if dirty
   (when (vc-git-root default-directory)
     (let* ((branch (car (vc-git-branches)))
            (status (shell-command-to-string "git status --porcelain"))
            (clean (string-empty-p (string-trim status))))
       (propertize (format " on  %s" branch)
                   'face (if clean '(:foreground "#98C379") '(:foreground "#E06C75")))))
   "\n"
   ;; Arrow prompt
   (propertize "❯ " 'face '(:foreground "#61AFEF" :weight bold))))

(setq eshell-prompt-function #'my/eshell-starship-prompt
      eshell-prompt-regexp "^❯ ")
(setq eshell-banner-message "")
#+end_src

** Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.
#+begin_src emacs-lisp
(use-package vterm
:config
(setq shell-file-name "/bin/sh"
      vterm-max-scrollback 5000))
#+end_src

** Vterm-Toggle
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.
#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert)
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.4)))
  (defun my/vterm-toggle-fullscreen ()
    "Toggle vterm in fullscreen."
    (interactive)
    (let ((vterm-toggle-fullscreen-p t))
      (vterm-toggle))))
#+end_src

* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.
#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

* THEME
This is where I configure the theme that will be utilized.

** Themes
Some extra themes.
#+begin_src emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :ensure t)
(use-package cherry-blossom-theme
  :ensure t)
(use-package abyss-theme
  :ensure t)
(use-package gruvbox-theme
  :ensure t)
(use-package monokai-theme
  :ensure t)
(use-package everforest
  :ensure (:host github :repo "Theory-of-Everything/everforest-emacs")
  :defer t)
#+end_src

** doom-themes
Doom Emacs pack with all its extra themes.
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; Sets the default theme to load!!! 
  ;;(load-theme 'doom-one t)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** ef-themes
This is where the theme gets selected, im also installing ef-themes here.
#+begin_src emacs-lisp
(use-package ef-themes
  :ensure t
  :config
  (load-theme 'doom-gruvbox t))
#+end_src

** Remove Background on line numbers
#+begin_src emacs-lisp
(custom-set-faces
 '(line-number ((t (:background nil))))
 '(line-number-current-line ((t (:background nil))))
 '(org-block ((t (:background nil)))))
#+end_src

* TLDR
"TLDR" refere-se tanto a um serviço de documentação resumida ("Too Long; Didn't Read") que pode ser acedido através de uma aplicação de linha de comandos como também a uma extensão para o Emacs, designada por tldr.el, que permite aceder a essas mesmas informações concisas diretamente de dentro do editor, utilizando o comando M-x tldr. 
#+begin_src emacs-lisp
(use-package tldr)
#+end_src

* TRANSPARENCY
With Emacs version 29, true transparency has been added.  I have turned transparency off by setting the alpha to '100'.  If you want some slight transparency, try setting alpha to '90'.  Of course, if you set alpha to '0', the background of Emacs would completely transparent.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 100)) ; For all new frames henceforth
#+end_src

* WHICH-KEY
Which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. For example, after enabling the minor mode if you enter C-x and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow C-x (or as many as space allows given your settings).
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode 1)
  :diminish
  :config
  (which-key-setup-side-window-right-bottom)
  (setq which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-idle-delay 0.4
        which-key-max-description-length 25
        which-key-separator " → "))
#+end_src

* ZOXIDE
Enable zoxide for eshell.

#+begin_src emacs-lisp
;; Zoxide integration for Emacs with consult
(require 'consult nil t)  ; Load consult if available

;; Auto-add directories to zoxide database
;; (add-hook 
;;  'dired-mode-hook 
;;  (lambda () 
;;    (when (and dired-directory (file-directory-p dired-directory))
;;      (call-process-shell-command 
;;       (format "zoxide add %s" (shell-quote-argument dired-directory)) nil 0))))

;; (add-hook 
;;  'find-file-hook 
;;  (lambda () 
;;    (when (and buffer-file-name (file-exists-p buffer-file-name))
;;      (call-process-shell-command 
;;       (format "zoxide add %s" (shell-quote-argument (file-name-directory buffer-file-name))) 
;;       nil 0))))

;; Enhanced directory finder using zoxide with consult (if available)
(defun find-file-with-zoxide ()
  "Use zoxide to find and navigate to directories."
  (interactive)
  (if (featurep 'consult)
      ;; Use consult if available
      (let ((target (consult--read
                     (consult--process-collection (lambda (x) (list "zoxide" "query" "-l" x)))

     :prompt "Zoxide: "
                     :require-match nil
                     :lookup #'consult--lookup-member
                     :require-match t
                     :category 'file
                     :sort nil)))
        (if target
            (let ((default-directory (concat target "/")))
              (call-interactively 'find-file))
          (call-interactively 'find-file)))
    ;; Fallback to simple completing-read
    (let* ((dirs (split-string 
                  (shell-command-to-string "zoxide query -l") "\n" t))
           (target (when dirs
                     (completing-read "Zoxide: " dirs nil t))))
      (if target
          (let ((default-directory (concat target "/")))
            (call-interactively 'find-file))
        (call-interactively 'find-file)))))

;; Eshell integration
(defun eshell/z (&optional pattern)
  "Change directory using zoxide in eshell."
  (if pattern
      (let ((dir (string-trim
                  (shell-command-to-string
                   (format "zoxide query %s" (shell-quote-argument pattern))))))
        (if (and (not (string-empty-p dir)) (file-directory-p dir))
            (progn
              (eshell/cd dir)
              (eshell-emit-prompt))
          (message "No directory found for pattern: %s" pattern)))
    ;; No pattern - show interactive selection
    (let ((dirs (split-string 
                 (shell-command-to-string "zoxide query -l") "\n" t)))
      (when dirs
        (let ((selected (completing-read "Jump to: " dirs nil t)))
          (when selected
            (eshell/cd selected)
            (eshell-emit-prompt)))))))

;; Alternative eshell command for interactive mode
(defun eshell/zi ()
  "Interactive zoxide directory selection in eshell."
  (eshell/z))

;; Keybinding suggestion
(global-set-key (kbd "C-x C-z") 'find-file-with-zoxide)
#+end_src
